
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004cb8  08004cb8  00005cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d28  08004d28  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d28  08004d28  00005d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d30  08004d30  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d30  08004d30  00005d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d34  08004d34  00005d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004d38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006070  2**0
                  CONTENTS
 10 .bss          00012f5c  20000070  20000070  00006070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012fcc  20012fcc  00006070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb47  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027f5  00000000  00000000  00014be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  000173e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc7  00000000  00000000  00018338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ded  00000000  00000000  00018eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000112a4  00000000  00000000  0003bcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3dc1  00000000  00000000  0004cf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120d51  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045dc  00000000  00000000  00120d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00125370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ca0 	.word	0x08004ca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004ca0 	.word	0x08004ca0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fbed 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f847 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f8af 	bl	8000630 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1",200,"Hello world from Task-1",2,&task1_handle);
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	2302      	movs	r3, #2
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	4b19      	ldr	r3, [pc, #100]	@ (8000544 <main+0x84>)
 80004de:	22c8      	movs	r2, #200	@ 0xc8
 80004e0:	4919      	ldr	r1, [pc, #100]	@ (8000548 <main+0x88>)
 80004e2:	481a      	ldr	r0, [pc, #104]	@ (800054c <main+0x8c>)
 80004e4:	f002 f980 	bl	80027e8 <xTaskCreate>
 80004e8:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d00b      	beq.n	8000508 <main+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80004f4:	f383 8811 	msr	BASEPRI, r3
 80004f8:	f3bf 8f6f 	isb	sy
 80004fc:	f3bf 8f4f 	dsb	sy
 8000500:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <main+0x44>

  status = xTaskCreate(task2_handler, "Task-2",200,"Hello world from Task-2",2,&task2_handle);
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	2302      	movs	r3, #2
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <main+0x90>)
 8000512:	22c8      	movs	r2, #200	@ 0xc8
 8000514:	490f      	ldr	r1, [pc, #60]	@ (8000554 <main+0x94>)
 8000516:	4810      	ldr	r0, [pc, #64]	@ (8000558 <main+0x98>)
 8000518:	f002 f966 	bl	80027e8 <xTaskCreate>
 800051c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d00b      	beq.n	800053c <main+0x7c>
        __asm volatile
 8000524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000528:	f383 8811 	msr	BASEPRI, r3
 800052c:	f3bf 8f6f 	isb	sy
 8000530:	f3bf 8f4f 	dsb	sy
 8000534:	60fb      	str	r3, [r7, #12]
    }
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x78>

  vTaskStartScheduler();
 800053c:	f002 fab2 	bl	8002aa4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <main+0x80>
 8000544:	08004cb8 	.word	0x08004cb8
 8000548:	08004cd0 	.word	0x08004cd0
 800054c:	080008ed 	.word	0x080008ed
 8000550:	08004cd8 	.word	0x08004cd8
 8000554:	08004cf0 	.word	0x08004cf0
 8000558:	08000915 	.word	0x08000915

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	@ 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f004 f8ce 	bl	800470c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	@ (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	@ (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	@ (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005cc:	2308      	movs	r3, #8
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d0:	2332      	movs	r3, #50	@ 0x32
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d8:	2307      	movs	r3, #7
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fe39 	bl	8001258 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 f9b8 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f001 f89a 	bl	8001748 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061a:	f000 f9a1 	bl	8000960 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	@ 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08c      	sub	sp, #48	@ 0x30
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
 800064a:	4ba2      	ldr	r3, [pc, #648]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4aa1      	ldr	r2, [pc, #644]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 8000650:	f043 0310 	orr.w	r3, r3, #16
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b9f      	ldr	r3, [pc, #636]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0310 	and.w	r3, r3, #16
 800065e:	61bb      	str	r3, [r7, #24]
 8000660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	4b9b      	ldr	r3, [pc, #620]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a9a      	ldr	r2, [pc, #616]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b98      	ldr	r3, [pc, #608]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b94      	ldr	r3, [pc, #592]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a93      	ldr	r2, [pc, #588]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 8000688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b91      	ldr	r3, [pc, #580]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b8d      	ldr	r3, [pc, #564]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a8c      	ldr	r2, [pc, #560]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b8a      	ldr	r3, [pc, #552]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b86      	ldr	r3, [pc, #536]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a85      	ldr	r2, [pc, #532]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b83      	ldr	r3, [pc, #524]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b7f      	ldr	r3, [pc, #508]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a7e      	ldr	r2, [pc, #504]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b7c      	ldr	r3, [pc, #496]	@ (80008d4 <MX_GPIO_Init+0x2a4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2108      	movs	r1, #8
 80006f2:	4879      	ldr	r0, [pc, #484]	@ (80008d8 <MX_GPIO_Init+0x2a8>)
 80006f4:	f000 fd96 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2101      	movs	r1, #1
 80006fc:	4877      	ldr	r0, [pc, #476]	@ (80008dc <MX_GPIO_Init+0x2ac>)
 80006fe:	f000 fd91 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000702:	2200      	movs	r2, #0
 8000704:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000708:	4875      	ldr	r0, [pc, #468]	@ (80008e0 <MX_GPIO_Init+0x2b0>)
 800070a:	f000 fd8b 	bl	8001224 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800070e:	2308      	movs	r3, #8
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	486c      	ldr	r0, [pc, #432]	@ (80008d8 <MX_GPIO_Init+0x2a8>)
 8000726:	f000 fbe1 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800072a:	2301      	movs	r3, #1
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4866      	ldr	r0, [pc, #408]	@ (80008dc <MX_GPIO_Init+0x2ac>)
 8000742:	f000 fbd3 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000746:	2308      	movs	r3, #8
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000756:	2305      	movs	r3, #5
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	485e      	ldr	r0, [pc, #376]	@ (80008dc <MX_GPIO_Init+0x2ac>)
 8000762:	f000 fbc3 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000766:	2301      	movs	r3, #1
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	485a      	ldr	r0, [pc, #360]	@ (80008e4 <MX_GPIO_Init+0x2b4>)
 800077c:	f000 fbb6 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000780:	2310      	movs	r3, #16
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000790:	2306      	movs	r3, #6
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4852      	ldr	r0, [pc, #328]	@ (80008e4 <MX_GPIO_Init+0x2b4>)
 800079c:	f000 fba6 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007a0:	23e0      	movs	r3, #224	@ 0xe0
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b0:	2305      	movs	r3, #5
 80007b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	484a      	ldr	r0, [pc, #296]	@ (80008e4 <MX_GPIO_Init+0x2b4>)
 80007bc:	f000 fb96 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007c0:	2304      	movs	r3, #4
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	4845      	ldr	r0, [pc, #276]	@ (80008e8 <MX_GPIO_Init+0x2b8>)
 80007d4:	f000 fb8a 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ea:	2305      	movs	r3, #5
 80007ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	483c      	ldr	r0, [pc, #240]	@ (80008e8 <MX_GPIO_Init+0x2b8>)
 80007f6:	f000 fb79 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80007fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4833      	ldr	r0, [pc, #204]	@ (80008e0 <MX_GPIO_Init+0x2b0>)
 8000814:	f000 fb6a 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000818:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800082a:	2306      	movs	r3, #6
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4829      	ldr	r0, [pc, #164]	@ (80008dc <MX_GPIO_Init+0x2ac>)
 8000836:	f000 fb59 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800083a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <MX_GPIO_Init+0x2b4>)
 8000850:	f000 fb4c 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000854:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000866:	230a      	movs	r3, #10
 8000868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	481c      	ldr	r0, [pc, #112]	@ (80008e4 <MX_GPIO_Init+0x2b4>)
 8000872:	f000 fb3b 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000876:	2320      	movs	r3, #32
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4815      	ldr	r0, [pc, #84]	@ (80008e0 <MX_GPIO_Init+0x2b0>)
 800088a:	f000 fb2f 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800088e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000894:	2312      	movs	r3, #18
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a0:	2304      	movs	r3, #4
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	480f      	ldr	r0, [pc, #60]	@ (80008e8 <MX_GPIO_Init+0x2b8>)
 80008ac:	f000 fb1e 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <MX_GPIO_Init+0x2a8>)
 80008c6:	f000 fb11 	bl	8000eec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	@ 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40020400 	.word	0x40020400

080008ec <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*) parameters);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f003 fe29 	bl	800454c <puts>
		taskYIELD();
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <task1_handler+0x24>)
 80008fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	f3bf 8f4f 	dsb	sy
 8000906:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*) parameters);
 800090a:	bf00      	nop
 800090c:	e7f2      	b.n	80008f4 <task1_handler+0x8>
 800090e:	bf00      	nop
 8000910:	e000ed04 	.word	0xe000ed04

08000914 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*) parameters);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f003 fe15 	bl	800454c <puts>
		taskYIELD();
 8000922:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <task2_handler+0x24>)
 8000924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*) parameters);
 8000932:	bf00      	nop
 8000934:	e7f2      	b.n	800091c <task2_handler+0x8>
 8000936:	bf00      	nop
 8000938:	e000ed04 	.word	0xe000ed04

0800093c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a04      	ldr	r2, [pc, #16]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d101      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094e:	f000 f9cb 	bl	8000ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40001000 	.word	0x40001000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <Error_Handler+0x8>

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	@ (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000980:	6453      	str	r3, [r2, #68]	@ 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	@ 0x38
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b33      	ldr	r3, [pc, #204]	@ (8000aa0 <HAL_InitTick+0xe4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	4a32      	ldr	r2, [pc, #200]	@ (8000aa0 <HAL_InitTick+0xe4>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6413      	str	r3, [r2, #64]	@ 0x40
 80009dc:	4b30      	ldr	r3, [pc, #192]	@ (8000aa0 <HAL_InitTick+0xe4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	f003 0310 	and.w	r3, r3, #16
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e8:	f107 0210 	add.w	r2, r7, #16
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 f8b4 	bl	8001b60 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d103      	bne.n	8000a0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a02:	f001 f899 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 8000a06:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a08:	e004      	b.n	8000a14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a0a:	f001 f895 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a16:	4a23      	ldr	r2, [pc, #140]	@ (8000aa4 <HAL_InitTick+0xe8>)
 8000a18:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1c:	0c9b      	lsrs	r3, r3, #18
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a22:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <HAL_InitTick+0xec>)
 8000a24:	4a21      	ldr	r2, [pc, #132]	@ (8000aac <HAL_InitTick+0xf0>)
 8000a26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <HAL_InitTick+0xec>)
 8000a2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a30:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa8 <HAL_InitTick+0xec>)
 8000a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <HAL_InitTick+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <HAL_InitTick+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <HAL_InitTick+0xec>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a48:	4817      	ldr	r0, [pc, #92]	@ (8000aa8 <HAL_InitTick+0xec>)
 8000a4a:	f001 f8bb 	bl	8001bc4 <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d11b      	bne.n	8000a94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a5c:	4812      	ldr	r0, [pc, #72]	@ (8000aa8 <HAL_InitTick+0xec>)
 8000a5e:	f001 f90b 	bl	8001c78 <HAL_TIM_Base_Start_IT>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d111      	bne.n	8000a94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a70:	2036      	movs	r0, #54	@ 0x36
 8000a72:	f000 fa2d 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d808      	bhi.n	8000a8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	2036      	movs	r0, #54	@ 0x36
 8000a82:	f000 fa09 	bl	8000e98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <HAL_InitTick+0xf4>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	e002      	b.n	8000a94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3738      	adds	r7, #56	@ 0x38
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	431bde83 	.word	0x431bde83
 8000aa8:	2000008c 	.word	0x2000008c
 8000aac:	40001000 	.word	0x40001000
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <TIM6_DAC_IRQHandler+0x10>)
 8000af2:	f001 f931 	bl	8001d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000008c 	.word	0x2000008c

08000b00 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <ITM_SendChar+0x48>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b48 <ITM_SendChar+0x48>)
 8000b10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b14:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <ITM_SendChar+0x4c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <ITM_SendChar+0x4c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b22:	bf00      	nop
 8000b24:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f8      	beq.n	8000b24 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b32:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	6013      	str	r3, [r2, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000edfc 	.word	0xe000edfc
 8000b4c:	e0000e00 	.word	0xe0000e00

08000b50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e00a      	b.n	8000b78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b62:	f3af 8000 	nop.w
 8000b66:	4601      	mov	r1, r0
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	b2ca      	uxtb	r2, r1
 8000b70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf0      	blt.n	8000b62 <_read+0x12>
  }

  return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e009      	b.n	8000bb0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ffab 	bl	8000b00 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf1      	blt.n	8000b9c <_write+0x12>
  }
  return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_close>:

int _close(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bea:	605a      	str	r2, [r3, #4]
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_isatty>:

int _isatty(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c54:	f7ff ffea 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	@ (8000c90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	@ (8000c9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f003 fd93 	bl	80047a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fc1d 	bl	80004c0 <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c94:	08004d38 	.word	0x08004d38
  ldr r2, =_sbss
 8000c98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c9c:	20012fcc 	.word	0x20012fcc

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f8d8 	bl	8000e82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff fe72 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fe48 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200000d4 	.word	0x200000d4

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200000d4 	.word	0x200000d4

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	@ (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ff4c 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eaa:	f7ff ff61 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	6978      	ldr	r0, [r7, #20]
 8000eb6:	f7ff ffb1 	bl	8000e1c <NVIC_EncodePriority>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff80 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff54 	bl	8000d8c <__NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	e16b      	b.n	80011e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f040 815a 	bne.w	80011da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d005      	beq.n	8000f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d130      	bne.n	8000fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	f003 0201 	and.w	r2, r3, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d017      	beq.n	8000fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d123      	bne.n	8001030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	69b9      	ldr	r1, [r7, #24]
 800102c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0203 	and.w	r2, r3, #3
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80b4 	beq.w	80011da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b60      	ldr	r3, [pc, #384]	@ (80011f8 <HAL_GPIO_Init+0x30c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	4a5f      	ldr	r2, [pc, #380]	@ (80011f8 <HAL_GPIO_Init+0x30c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001080:	6453      	str	r3, [r2, #68]	@ 0x44
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <HAL_GPIO_Init+0x30c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108e:	4a5b      	ldr	r2, [pc, #364]	@ (80011fc <HAL_GPIO_Init+0x310>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a52      	ldr	r2, [pc, #328]	@ (8001200 <HAL_GPIO_Init+0x314>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d02b      	beq.n	8001112 <HAL_GPIO_Init+0x226>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a51      	ldr	r2, [pc, #324]	@ (8001204 <HAL_GPIO_Init+0x318>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d025      	beq.n	800110e <HAL_GPIO_Init+0x222>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a50      	ldr	r2, [pc, #320]	@ (8001208 <HAL_GPIO_Init+0x31c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d01f      	beq.n	800110a <HAL_GPIO_Init+0x21e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4f      	ldr	r2, [pc, #316]	@ (800120c <HAL_GPIO_Init+0x320>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0x21a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001210 <HAL_GPIO_Init+0x324>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x216>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001214 <HAL_GPIO_Init+0x328>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x212>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001218 <HAL_GPIO_Init+0x32c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x20e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4b      	ldr	r2, [pc, #300]	@ (800121c <HAL_GPIO_Init+0x330>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x20a>
 80010f2:	2307      	movs	r3, #7
 80010f4:	e00e      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010f6:	2308      	movs	r3, #8
 80010f8:	e00c      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010fa:	2306      	movs	r3, #6
 80010fc:	e00a      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010fe:	2305      	movs	r3, #5
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001102:	2304      	movs	r3, #4
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x228>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x228>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001112:	2300      	movs	r3, #0
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001124:	4935      	ldr	r1, [pc, #212]	@ (80011fc <HAL_GPIO_Init+0x310>)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b3b      	ldr	r3, [pc, #236]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a32      	ldr	r2, [pc, #200]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b30      	ldr	r3, [pc, #192]	@ (8001220 <HAL_GPIO_Init+0x334>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a27      	ldr	r2, [pc, #156]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <HAL_GPIO_Init+0x334>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <HAL_GPIO_Init+0x334>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d4:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <HAL_GPIO_Init+0x334>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	f67f ae90 	bls.w	8000f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40021c00 	.word	0x40021c00
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e267      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d075      	beq.n	8001362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001276:	4b88      	ldr	r3, [pc, #544]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b04      	cmp	r3, #4
 8001280:	d00c      	beq.n	800129c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4b85      	ldr	r3, [pc, #532]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800128a:	2b08      	cmp	r3, #8
 800128c:	d112      	bne.n	80012b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128e:	4b82      	ldr	r3, [pc, #520]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001296:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800129a:	d10b      	bne.n	80012b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	4b7e      	ldr	r3, [pc, #504]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d05b      	beq.n	8001360 <HAL_RCC_OscConfig+0x108>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d157      	bne.n	8001360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e242      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012bc:	d106      	bne.n	80012cc <HAL_RCC_OscConfig+0x74>
 80012be:	4b76      	ldr	r3, [pc, #472]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a75      	ldr	r2, [pc, #468]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e01d      	b.n	8001308 <HAL_RCC_OscConfig+0xb0>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x98>
 80012d6:	4b70      	ldr	r3, [pc, #448]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6f      	ldr	r2, [pc, #444]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80012e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e00b      	b.n	8001308 <HAL_RCC_OscConfig+0xb0>
 80012f0:	4b69      	ldr	r3, [pc, #420]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a68      	ldr	r2, [pc, #416]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80012f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b66      	ldr	r3, [pc, #408]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a65      	ldr	r2, [pc, #404]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 8001302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d013      	beq.n	8001338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fcfe 	bl	8000d10 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fcfa 	bl	8000d10 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	@ 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e207      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	4b5b      	ldr	r3, [pc, #364]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0xc0>
 8001336:	e014      	b.n	8001362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fcea 	bl	8000d10 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fce6 	bl	8000d10 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	@ 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1f3      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	4b51      	ldr	r3, [pc, #324]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0xe8>
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d063      	beq.n	8001436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800136e:	4b4a      	ldr	r3, [pc, #296]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00b      	beq.n	8001392 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	4b47      	ldr	r3, [pc, #284]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001382:	2b08      	cmp	r3, #8
 8001384:	d11c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001386:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d116      	bne.n	80013c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x152>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d001      	beq.n	80013aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e1c7      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4937      	ldr	r1, [pc, #220]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	e03a      	b.n	8001436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d020      	beq.n	800140a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c8:	4b34      	ldr	r3, [pc, #208]	@ (800149c <HAL_RCC_OscConfig+0x244>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ce:	f7ff fc9f 	bl	8000d10 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fc9b 	bl	8000d10 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e1a8      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f4:	4b28      	ldr	r3, [pc, #160]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4925      	ldr	r1, [pc, #148]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
 8001408:	e015      	b.n	8001436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140a:	4b24      	ldr	r3, [pc, #144]	@ (800149c <HAL_RCC_OscConfig+0x244>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fc7e 	bl	8000d10 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001418:	f7ff fc7a 	bl	8000d10 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e187      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d036      	beq.n	80014b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d016      	beq.n	8001478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_RCC_OscConfig+0x248>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff fc5e 	bl	8000d10 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff fc5a 	bl	8000d10 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e167      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <HAL_RCC_OscConfig+0x240>)
 800146c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x200>
 8001476:	e01b      	b.n	80014b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_RCC_OscConfig+0x248>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147e:	f7ff fc47 	bl	8000d10 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	e00e      	b.n	80014a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001486:	f7ff fc43 	bl	8000d10 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d907      	bls.n	80014a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e150      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
 8001498:	40023800 	.word	0x40023800
 800149c:	42470000 	.word	0x42470000
 80014a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a4:	4b88      	ldr	r3, [pc, #544]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 80014a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1ea      	bne.n	8001486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 8097 	beq.w	80015ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c2:	4b81      	ldr	r3, [pc, #516]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10f      	bne.n	80014ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b7d      	ldr	r3, [pc, #500]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	4a7c      	ldr	r2, [pc, #496]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014de:	4b7a      	ldr	r3, [pc, #488]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ea:	2301      	movs	r3, #1
 80014ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ee:	4b77      	ldr	r3, [pc, #476]	@ (80016cc <HAL_RCC_OscConfig+0x474>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d118      	bne.n	800152c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fa:	4b74      	ldr	r3, [pc, #464]	@ (80016cc <HAL_RCC_OscConfig+0x474>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a73      	ldr	r2, [pc, #460]	@ (80016cc <HAL_RCC_OscConfig+0x474>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001506:	f7ff fc03 	bl	8000d10 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150e:	f7ff fbff 	bl	8000d10 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e10c      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001520:	4b6a      	ldr	r3, [pc, #424]	@ (80016cc <HAL_RCC_OscConfig+0x474>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d106      	bne.n	8001542 <HAL_RCC_OscConfig+0x2ea>
 8001534:	4b64      	ldr	r3, [pc, #400]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001538:	4a63      	ldr	r2, [pc, #396]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001540:	e01c      	b.n	800157c <HAL_RCC_OscConfig+0x324>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b05      	cmp	r3, #5
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x30c>
 800154a:	4b5f      	ldr	r3, [pc, #380]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154e:	4a5e      	ldr	r2, [pc, #376]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6713      	str	r3, [r2, #112]	@ 0x70
 8001556:	4b5c      	ldr	r3, [pc, #368]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155a:	4a5b      	ldr	r2, [pc, #364]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6713      	str	r3, [r2, #112]	@ 0x70
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0x324>
 8001564:	4b58      	ldr	r3, [pc, #352]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001568:	4a57      	ldr	r2, [pc, #348]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001570:	4b55      	ldr	r3, [pc, #340]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001574:	4a54      	ldr	r2, [pc, #336]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 8001576:	f023 0304 	bic.w	r3, r3, #4
 800157a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d015      	beq.n	80015b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fbc4 	bl	8000d10 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158c:	f7ff fbc0 	bl	8000d10 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e0cb      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a2:	4b49      	ldr	r3, [pc, #292]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0ee      	beq.n	800158c <HAL_RCC_OscConfig+0x334>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b0:	f7ff fbae 	bl	8000d10 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b8:	f7ff fbaa 	bl	8000d10 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e0b5      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ce:	4b3e      	ldr	r3, [pc, #248]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1ee      	bne.n	80015b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015da:	7dfb      	ldrb	r3, [r7, #23]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e0:	4b39      	ldr	r3, [pc, #228]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	4a38      	ldr	r2, [pc, #224]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a1 	beq.w	8001738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f6:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d05c      	beq.n	80016bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d141      	bne.n	800168e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160a:	4b31      	ldr	r3, [pc, #196]	@ (80016d0 <HAL_RCC_OscConfig+0x478>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fb7e 	bl	8000d10 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fb7a 	bl	8000d10 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e087      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162a:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69da      	ldr	r2, [r3, #28]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	3b01      	subs	r3, #1
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	061b      	lsls	r3, r3, #24
 800165a:	491b      	ldr	r1, [pc, #108]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <HAL_RCC_OscConfig+0x478>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff fb53 	bl	8000d10 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166e:	f7ff fb4f 	bl	8000d10 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e05c      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x416>
 800168c:	e054      	b.n	8001738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <HAL_RCC_OscConfig+0x478>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fb3c 	bl	8000d10 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff fb38 	bl	8000d10 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e045      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_RCC_OscConfig+0x470>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x444>
 80016ba:	e03d      	b.n	8001738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d107      	bne.n	80016d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e038      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40007000 	.word	0x40007000
 80016d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <HAL_RCC_OscConfig+0x4ec>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d028      	beq.n	8001734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d121      	bne.n	8001734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d11a      	bne.n	8001734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001704:	4013      	ands	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800170a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800170c:	4293      	cmp	r3, r2
 800170e:	d111      	bne.n	8001734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171a:	085b      	lsrs	r3, r3, #1
 800171c:	3b01      	subs	r3, #1
 800171e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001720:	429a      	cmp	r2, r3
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0cc      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800175c:	4b68      	ldr	r3, [pc, #416]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d90c      	bls.n	8001784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b65      	ldr	r3, [pc, #404]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b63      	ldr	r3, [pc, #396]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0b8      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800179c:	4b59      	ldr	r3, [pc, #356]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a58      	ldr	r2, [pc, #352]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b4:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4a52      	ldr	r2, [pc, #328]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c0:	4b50      	ldr	r3, [pc, #320]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	494d      	ldr	r1, [pc, #308]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d044      	beq.n	8001868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4b47      	ldr	r3, [pc, #284]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d119      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e07f      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d003      	beq.n	8001806 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001802:	2b03      	cmp	r3, #3
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001806:	4b3f      	ldr	r3, [pc, #252]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e06f      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001816:	4b3b      	ldr	r3, [pc, #236]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e067      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001826:	4b37      	ldr	r3, [pc, #220]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f023 0203 	bic.w	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4934      	ldr	r1, [pc, #208]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	4313      	orrs	r3, r2
 8001836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001838:	f7ff fa6a 	bl	8000d10 <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	e00a      	b.n	8001856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001840:	f7ff fa66 	bl	8000d10 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e04f      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	4b2b      	ldr	r3, [pc, #172]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 020c 	and.w	r2, r3, #12
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	429a      	cmp	r2, r3
 8001866:	d1eb      	bne.n	8001840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001868:	4b25      	ldr	r3, [pc, #148]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d20c      	bcs.n	8001890 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e032      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800189c:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4916      	ldr	r1, [pc, #88]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	490e      	ldr	r1, [pc, #56]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ce:	f000 f821 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	490a      	ldr	r1, [pc, #40]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	5ccb      	ldrb	r3, [r1, r3]
 80018e2:	fa22 f303 	lsr.w	r3, r2, r3
 80018e6:	4a09      	ldr	r2, [pc, #36]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_RCC_ClockConfig+0x1c8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff f864 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023c00 	.word	0x40023c00
 8001904:	40023800 	.word	0x40023800
 8001908:	08004d10 	.word	0x08004d10
 800190c:	20000000 	.word	0x20000000
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001918:	b094      	sub	sp, #80	@ 0x50
 800191a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800192c:	4b79      	ldr	r3, [pc, #484]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b08      	cmp	r3, #8
 8001936:	d00d      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x40>
 8001938:	2b08      	cmp	r3, #8
 800193a:	f200 80e1 	bhi.w	8001b00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x34>
 8001942:	2b04      	cmp	r3, #4
 8001944:	d003      	beq.n	800194e <HAL_RCC_GetSysClockFreq+0x3a>
 8001946:	e0db      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001948:	4b73      	ldr	r3, [pc, #460]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x204>)
 800194a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800194c:	e0db      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194e:	4b73      	ldr	r3, [pc, #460]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x208>)
 8001950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001952:	e0d8      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001954:	4b6f      	ldr	r3, [pc, #444]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800195c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d063      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	099b      	lsrs	r3, r3, #6
 8001970:	2200      	movs	r2, #0
 8001972:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001974:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800197c:	633b      	str	r3, [r7, #48]	@ 0x30
 800197e:	2300      	movs	r3, #0
 8001980:	637b      	str	r3, [r7, #52]	@ 0x34
 8001982:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001986:	4622      	mov	r2, r4
 8001988:	462b      	mov	r3, r5
 800198a:	f04f 0000 	mov.w	r0, #0
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	0159      	lsls	r1, r3, #5
 8001994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001998:	0150      	lsls	r0, r2, #5
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4621      	mov	r1, r4
 80019a0:	1a51      	subs	r1, r2, r1
 80019a2:	6139      	str	r1, [r7, #16]
 80019a4:	4629      	mov	r1, r5
 80019a6:	eb63 0301 	sbc.w	r3, r3, r1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b8:	4659      	mov	r1, fp
 80019ba:	018b      	lsls	r3, r1, #6
 80019bc:	4651      	mov	r1, sl
 80019be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019c2:	4651      	mov	r1, sl
 80019c4:	018a      	lsls	r2, r1, #6
 80019c6:	4651      	mov	r1, sl
 80019c8:	ebb2 0801 	subs.w	r8, r2, r1
 80019cc:	4659      	mov	r1, fp
 80019ce:	eb63 0901 	sbc.w	r9, r3, r1
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019e6:	4690      	mov	r8, r2
 80019e8:	4699      	mov	r9, r3
 80019ea:	4623      	mov	r3, r4
 80019ec:	eb18 0303 	adds.w	r3, r8, r3
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	462b      	mov	r3, r5
 80019f4:	eb49 0303 	adc.w	r3, r9, r3
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a06:	4629      	mov	r1, r5
 8001a08:	024b      	lsls	r3, r1, #9
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a10:	4621      	mov	r1, r4
 8001a12:	024a      	lsls	r2, r1, #9
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a24:	f7fe fbd4 	bl	80001d0 <__aeabi_uldivmod>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a30:	e058      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a32:	4b38      	ldr	r3, [pc, #224]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	099b      	lsrs	r3, r3, #6
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a42:	623b      	str	r3, [r7, #32]
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a4c:	4642      	mov	r2, r8
 8001a4e:	464b      	mov	r3, r9
 8001a50:	f04f 0000 	mov.w	r0, #0
 8001a54:	f04f 0100 	mov.w	r1, #0
 8001a58:	0159      	lsls	r1, r3, #5
 8001a5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5e:	0150      	lsls	r0, r2, #5
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4641      	mov	r1, r8
 8001a66:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a6a:	4649      	mov	r1, r9
 8001a6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a84:	ebb2 040a 	subs.w	r4, r2, sl
 8001a88:	eb63 050b 	sbc.w	r5, r3, fp
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	00eb      	lsls	r3, r5, #3
 8001a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a9a:	00e2      	lsls	r2, r4, #3
 8001a9c:	4614      	mov	r4, r2
 8001a9e:	461d      	mov	r5, r3
 8001aa0:	4643      	mov	r3, r8
 8001aa2:	18e3      	adds	r3, r4, r3
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	464b      	mov	r3, r9
 8001aa8:	eb45 0303 	adc.w	r3, r5, r3
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aba:	4629      	mov	r1, r5
 8001abc:	028b      	lsls	r3, r1, #10
 8001abe:	4621      	mov	r1, r4
 8001ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	028a      	lsls	r2, r1, #10
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	61fa      	str	r2, [r7, #28]
 8001ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad8:	f7fe fb7a 	bl	80001d0 <__aeabi_uldivmod>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	3301      	adds	r3, #1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001af4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001afe:	e002      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3750      	adds	r7, #80	@ 0x50
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	007a1200 	.word	0x007a1200

08001b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b3c:	f7ff fff0 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	0a9b      	lsrs	r3, r3, #10
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	4903      	ldr	r1, [pc, #12]	@ (8001b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4e:	5ccb      	ldrb	r3, [r1, r3]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	08004d20 	.word	0x08004d20

08001b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <HAL_RCC_GetClockConfig+0x60>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0207 	and.w	r2, r3, #7
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40023c00 	.word	0x40023c00

08001bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e041      	b.n	8001c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f839 	bl	8001c62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f000 f9c0 	bl	8001f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d001      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e04e      	b.n	8001d2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a23      	ldr	r2, [pc, #140]	@ (8001d3c <HAL_TIM_Base_Start_IT+0xc4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d022      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cba:	d01d      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d40 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d018      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1e      	ldr	r2, [pc, #120]	@ (8001d44 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d013      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00e      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d009      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d004      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a18      	ldr	r2, [pc, #96]	@ (8001d54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d111      	bne.n	8001d1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d010      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1a:	e007      	b.n	8001d2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40000800 	.word	0x40000800
 8001d48:	40000c00 	.word	0x40000c00
 8001d4c:	40010400 	.word	0x40010400
 8001d50:	40014000 	.word	0x40014000
 8001d54:	40001800 	.word	0x40001800

08001d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d020      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01b      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0202 	mvn.w	r2, #2
 8001d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8d2 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8c4 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8d5 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d020      	beq.n	8001e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01b      	beq.n	8001e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0204 	mvn.w	r2, #4
 8001dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8ac 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f89e 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f8af 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d020      	beq.n	8001e54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01b      	beq.n	8001e54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0208 	mvn.w	r2, #8
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f886 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f878 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f889 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d020      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01b      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0210 	mvn.w	r2, #16
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2208      	movs	r2, #8
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f860 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f852 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f863 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0201 	mvn.w	r2, #1
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fd3c 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f906 	bl	80020f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f834 	bl	8001f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00c      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0220 	mvn.w	r2, #32
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8d8 	bl	80020e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a46      	ldr	r2, [pc, #280]	@ (80020b4 <TIM_Base_SetConfig+0x12c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa6:	d00f      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a43      	ldr	r2, [pc, #268]	@ (80020b8 <TIM_Base_SetConfig+0x130>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00b      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a42      	ldr	r2, [pc, #264]	@ (80020bc <TIM_Base_SetConfig+0x134>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d007      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a41      	ldr	r2, [pc, #260]	@ (80020c0 <TIM_Base_SetConfig+0x138>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d003      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a40      	ldr	r2, [pc, #256]	@ (80020c4 <TIM_Base_SetConfig+0x13c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d108      	bne.n	8001fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a35      	ldr	r2, [pc, #212]	@ (80020b4 <TIM_Base_SetConfig+0x12c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d02b      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fe8:	d027      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a32      	ldr	r2, [pc, #200]	@ (80020b8 <TIM_Base_SetConfig+0x130>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d023      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a31      	ldr	r2, [pc, #196]	@ (80020bc <TIM_Base_SetConfig+0x134>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01f      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a30      	ldr	r2, [pc, #192]	@ (80020c0 <TIM_Base_SetConfig+0x138>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01b      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2f      	ldr	r2, [pc, #188]	@ (80020c4 <TIM_Base_SetConfig+0x13c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d017      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a2e      	ldr	r2, [pc, #184]	@ (80020c8 <TIM_Base_SetConfig+0x140>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a2d      	ldr	r2, [pc, #180]	@ (80020cc <TIM_Base_SetConfig+0x144>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00f      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2c      	ldr	r2, [pc, #176]	@ (80020d0 <TIM_Base_SetConfig+0x148>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00b      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2b      	ldr	r2, [pc, #172]	@ (80020d4 <TIM_Base_SetConfig+0x14c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2a      	ldr	r2, [pc, #168]	@ (80020d8 <TIM_Base_SetConfig+0x150>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d003      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a29      	ldr	r2, [pc, #164]	@ (80020dc <TIM_Base_SetConfig+0x154>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d108      	bne.n	800204c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a10      	ldr	r2, [pc, #64]	@ (80020b4 <TIM_Base_SetConfig+0x12c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <TIM_Base_SetConfig+0xf8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <TIM_Base_SetConfig+0x13c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d103      	bne.n	8002088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f023 0201 	bic.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
  }
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40010000 	.word	0x40010000
 80020b8:	40000400 	.word	0x40000400
 80020bc:	40000800 	.word	0x40000800
 80020c0:	40000c00 	.word	0x40000c00
 80020c4:	40010400 	.word	0x40010400
 80020c8:	40014000 	.word	0x40014000
 80020cc:	40014400 	.word	0x40014400
 80020d0:	40014800 	.word	0x40014800
 80020d4:	40001800 	.word	0x40001800
 80020d8:	40001c00 	.word	0x40001c00
 80020dc:	40002000 	.word	0x40002000

080020e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f103 0208 	add.w	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f103 0208 	add.w	r2, r3, #8
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f103 0208 	add.w	r2, r3, #8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d103      	bne.n	8002182 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e00c      	b.n	800219c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3308      	adds	r3, #8
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	e002      	b.n	8002190 <vListInsert+0x2e>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	429a      	cmp	r2, r3
 800219a:	d2f6      	bcs.n	800218a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	601a      	str	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6892      	ldr	r2, [r2, #8]
 80021ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6852      	ldr	r2, [r2, #4]
 80021f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d103      	bne.n	8002208 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	1e5a      	subs	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002232:	2301      	movs	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <xQueueGenericReset+0x30>
        __asm volatile
 8002240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	60fb      	str	r3, [r7, #12]
    }
 8002252:	bf00      	nop
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d052      	beq.n	8002304 <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002262:	2b00      	cmp	r3, #0
 8002264:	d04e      	beq.n	8002304 <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226e:	2100      	movs	r1, #0
 8002270:	fba3 2302 	umull	r2, r3, r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d000      	beq.n	800227a <xQueueGenericReset+0x52>
 8002278:	2101      	movs	r1, #1
 800227a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d141      	bne.n	8002304 <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 8002280:	f001 fd94 	bl	8003dac <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228c:	6939      	ldr	r1, [r7, #16]
 800228e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	441a      	add	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2200      	movs	r2, #0
 800229e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b0:	3b01      	subs	r3, #1
 80022b2:	6939      	ldr	r1, [r7, #16]
 80022b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	441a      	add	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	22ff      	movs	r2, #255	@ 0xff
 80022c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	22ff      	movs	r2, #255	@ 0xff
 80022cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00f      	beq.n	80022fe <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	3310      	adds	r3, #16
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fef8 	bl	80030d8 <xTaskRemoveFromEventList>
 80022e8:	e009      	b.n	80022fe <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	3310      	adds	r3, #16
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff0a 	bl	8002108 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3324      	adds	r3, #36	@ 0x24
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff05 	bl	8002108 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022fe:	f001 fd87 	bl	8003e10 <vPortExitCritical>
 8002302:	e001      	b.n	8002308 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10b      	bne.n	8002326 <xQueueGenericReset+0xfe>
        __asm volatile
 800230e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	60bb      	str	r3, [r7, #8]
    }
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	e7fd      	b.n	8002322 <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002326:	697b      	ldr	r3, [r7, #20]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	@ 0x28
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	4613      	mov	r3, r2
 800233c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d02e      	beq.n	80023a6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002348:	2100      	movs	r1, #0
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	fba3 2302 	umull	r2, r3, r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d000      	beq.n	8002358 <xQueueGenericCreate+0x28>
 8002356:	2101      	movs	r1, #1
 8002358:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800235a:	2b00      	cmp	r3, #0
 800235c:	d123      	bne.n	80023a6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002366:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800236a:	d81c      	bhi.n	80023a6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	3350      	adds	r3, #80	@ 0x50
 800237a:	4618      	mov	r0, r3
 800237c:	f001 fdfe 	bl	8003f7c <pvPortMalloc>
 8002380:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01d      	beq.n	80023c4 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3350      	adds	r3, #80	@ 0x50
 8002390:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002392:	79fa      	ldrb	r2, [r7, #7]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f815 	bl	80023ce <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80023a4:	e00e      	b.n	80023c4 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <xQueueGenericCreate+0x94>
        __asm volatile
 80023ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b0:	f383 8811 	msr	BASEPRI, r3
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	613b      	str	r3, [r7, #16]
    }
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023c4:	69fb      	ldr	r3, [r7, #28]
    }
 80023c6:	4618      	mov	r0, r3
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d103      	bne.n	80023ea <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e002      	b.n	80023f0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023fc:	2101      	movs	r1, #1
 80023fe:	69b8      	ldr	r0, [r7, #24]
 8002400:	f7ff ff12 	bl	8002228 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08c      	sub	sp, #48	@ 0x30
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10b      	bne.n	8002446 <xQueueReceive+0x32>
        __asm volatile
 800242e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	623b      	str	r3, [r7, #32]
    }
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	e7fd      	b.n	8002442 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d103      	bne.n	8002454 <xQueueReceive+0x40>
 800244c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <xQueueReceive+0x44>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <xQueueReceive+0x46>
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10b      	bne.n	8002476 <xQueueReceive+0x62>
        __asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	61fb      	str	r3, [r7, #28]
    }
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	e7fd      	b.n	8002472 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002476:	f001 f83d 	bl	80034f4 <xTaskGetSchedulerState>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <xQueueReceive+0x72>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <xQueueReceive+0x76>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <xQueueReceive+0x78>
 800248a:	2300      	movs	r3, #0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <xQueueReceive+0x94>
        __asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	61bb      	str	r3, [r7, #24]
    }
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024a8:	f001 fc80 	bl	8003dac <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d014      	beq.n	80024e2 <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024bc:	f000 f882 	bl	80025c4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d2:	3310      	adds	r3, #16
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fdff 	bl	80030d8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024da:	f001 fc99 	bl	8003e10 <vPortExitCritical>
                return pdPASS;
 80024de:	2301      	movs	r3, #1
 80024e0:	e069      	b.n	80025b6 <xQueueReceive+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d103      	bne.n	80024f0 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024e8:	f001 fc92 	bl	8003e10 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e062      	b.n	80025b6 <xQueueReceive+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <xQueueReceive+0xf0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fec4 	bl	8003288 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002500:	2301      	movs	r3, #1
 8002502:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002504:	f001 fc84 	bl	8003e10 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002508:	f000 fb1e 	bl	8002b48 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800250c:	f001 fc4e 	bl	8003dac <vPortEnterCritical>
 8002510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002512:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002516:	b25b      	sxtb	r3, r3
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d103      	bne.n	8002526 <xQueueReceive+0x112>
 800251e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002528:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800252c:	b25b      	sxtb	r3, r3
 800252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002532:	d103      	bne.n	800253c <xQueueReceive+0x128>
 8002534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800253c:	f001 fc68 	bl	8003e10 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002540:	1d3a      	adds	r2, r7, #4
 8002542:	f107 0310 	add.w	r3, r7, #16
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f000 feb3 	bl	80032b4 <xTaskCheckForTimeOut>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d123      	bne.n	800259c <xQueueReceive+0x188>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002554:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002556:	f000 f8ad 	bl	80026b4 <prvIsQueueEmpty>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d017      	beq.n	8002590 <xQueueReceive+0x17c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002562:	3324      	adds	r3, #36	@ 0x24
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fd49 	bl	8003000 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800256e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002570:	f000 f84e 	bl	8002610 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002574:	f000 faf6 	bl	8002b64 <xTaskResumeAll>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d194      	bne.n	80024a8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800257e:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <xQueueReceive+0x1ac>)
 8002580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	e78b      	b.n	80024a8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002592:	f000 f83d 	bl	8002610 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002596:	f000 fae5 	bl	8002b64 <xTaskResumeAll>
 800259a:	e785      	b.n	80024a8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800259c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800259e:	f000 f837 	bl	8002610 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025a2:	f000 fadf 	bl	8002b64 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025a8:	f000 f884 	bl	80026b4 <prvIsQueueEmpty>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f43f af7a 	beq.w	80024a8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80025b4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3730      	adds	r7, #48	@ 0x30
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	e000ed04 	.word	0xe000ed04

080025c4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d018      	beq.n	8002608 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	441a      	add	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d303      	bcc.n	80025f8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68d9      	ldr	r1, [r3, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	461a      	mov	r2, r3
 8002602:	6838      	ldr	r0, [r7, #0]
 8002604:	f002 f8f7 	bl	80047f6 <memcpy>
    }
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002618:	f001 fbc8 	bl	8003dac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002622:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002624:	e011      	b.n	800264a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3324      	adds	r3, #36	@ 0x24
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fd50 	bl	80030d8 <xTaskRemoveFromEventList>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800263e:	f000 fea1 	bl	8003384 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	3b01      	subs	r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800264a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	dce9      	bgt.n	8002626 <prvUnlockQueue+0x16>
 8002652:	e000      	b.n	8002656 <prvUnlockQueue+0x46>
                    break;
 8002654:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	22ff      	movs	r2, #255	@ 0xff
 800265a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800265e:	f001 fbd7 	bl	8003e10 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002662:	f001 fba3 	bl	8003dac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800266c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800266e:	e011      	b.n	8002694 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d012      	beq.n	800269e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3310      	adds	r3, #16
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fd2b 	bl	80030d8 <xTaskRemoveFromEventList>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002688:	f000 fe7c 	bl	8003384 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800268c:	7bbb      	ldrb	r3, [r7, #14]
 800268e:	3b01      	subs	r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002698:	2b00      	cmp	r3, #0
 800269a:	dce9      	bgt.n	8002670 <prvUnlockQueue+0x60>
 800269c:	e000      	b.n	80026a0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800269e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	22ff      	movs	r2, #255	@ 0xff
 80026a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80026a8:	f001 fbb2 	bl	8003e10 <vPortExitCritical>
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026bc:	f001 fb76 	bl	8003dac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	e001      	b.n	80026d2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026d2:	f001 fb9d 	bl	8003e10 <vPortExitCritical>

    return xReturn;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <vQueueAddToRegistry+0x2c>
        __asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	60fb      	str	r3, [r7, #12]
    }
 8002706:	bf00      	nop
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d024      	beq.n	800275c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e01e      	b.n	8002756 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002718:	4a18      	ldr	r2, [pc, #96]	@ (800277c <vQueueAddToRegistry+0x9c>)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	d105      	bne.n	8002734 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4a13      	ldr	r2, [pc, #76]	@ (800277c <vQueueAddToRegistry+0x9c>)
 800272e:	4413      	add	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
                    break;
 8002732:	e013      	b.n	800275c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10a      	bne.n	8002750 <vQueueAddToRegistry+0x70>
 800273a:	4a10      	ldr	r2, [pc, #64]	@ (800277c <vQueueAddToRegistry+0x9c>)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d104      	bne.n	8002750 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4a0c      	ldr	r2, [pc, #48]	@ (800277c <vQueueAddToRegistry+0x9c>)
 800274c:	4413      	add	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3301      	adds	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b07      	cmp	r3, #7
 800275a:	d9dd      	bls.n	8002718 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	200000d8 	.word	0x200000d8

08002780 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002790:	f001 fb0c 	bl	8003dac <vPortEnterCritical>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800279a:	b25b      	sxtb	r3, r3
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d103      	bne.n	80027aa <vQueueWaitForMessageRestricted+0x2a>
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d103      	bne.n	80027c0 <vQueueWaitForMessageRestricted+0x40>
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027c0:	f001 fb26 	bl	8003e10 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d106      	bne.n	80027da <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	3324      	adds	r3, #36	@ 0x24
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fc39 	bl	800304c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff18 	bl	8002610 <prvUnlockQueue>
    }
 80027e0:	bf00      	nop
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	@ 0x30
 80027ec:	af04      	add	r7, sp, #16
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f001 fbbd 	bl	8003f7c <pvPortMalloc>
 8002802:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d013      	beq.n	8002832 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800280a:	2058      	movs	r0, #88	@ 0x58
 800280c:	f001 fbb6 	bl	8003f7c <pvPortMalloc>
 8002810:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002818:	2258      	movs	r2, #88	@ 0x58
 800281a:	2100      	movs	r1, #0
 800281c:	69f8      	ldr	r0, [r7, #28]
 800281e:	f001 ff75 	bl	800470c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30
 8002828:	e005      	b.n	8002836 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800282a:	6978      	ldr	r0, [r7, #20]
 800282c:	f001 fc62 	bl	80040f4 <vPortFree>
 8002830:	e001      	b.n	8002836 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800283c:	88fa      	ldrh	r2, [r7, #6]
 800283e:	2300      	movs	r3, #0
 8002840:	9303      	str	r3, [sp, #12]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f80e 	bl	8002874 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002858:	69f8      	ldr	r0, [r7, #28]
 800285a:	f000 f89b 	bl	8002994 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800285e:	2301      	movs	r3, #1
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	e002      	b.n	800286a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800286a:	69bb      	ldr	r3, [r7, #24]
    }
 800286c:	4618      	mov	r0, r3
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002884:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	461a      	mov	r2, r3
 800288c:	21a5      	movs	r1, #165	@ 0xa5
 800288e:	f001 ff3d 	bl	800470c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800289c:	3b01      	subs	r3, #1
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	f023 0307 	bic.w	r3, r3, #7
 80028aa:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <prvInitialiseNewTask+0x5a>
        __asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	617b      	str	r3, [r7, #20]
    }
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	e7fd      	b.n	80028ca <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01e      	beq.n	8002912 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	e012      	b.n	8002900 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	7819      	ldrb	r1, [r3, #0]
 80028e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	3334      	adds	r3, #52	@ 0x34
 80028ea:	460a      	mov	r2, r1
 80028ec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3301      	adds	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b09      	cmp	r3, #9
 8002904:	d9e9      	bls.n	80028da <prvInitialiseNewTask+0x66>
 8002906:	e000      	b.n	800290a <prvInitialiseNewTask+0x96>
            {
                break;
 8002908:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800290a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	2b04      	cmp	r3, #4
 8002916:	d90b      	bls.n	8002930 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	613b      	str	r3, [r7, #16]
    }
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002932:	2b04      	cmp	r3, #4
 8002934:	d901      	bls.n	800293a <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002936:	2304      	movs	r3, #4
 8002938:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800293a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800293e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002944:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002948:	3304      	adds	r3, #4
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fbfc 	bl	8002148 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	3318      	adds	r3, #24
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fbf7 	bl	8002148 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800295a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800295e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002962:	f1c3 0205 	rsb	r2, r3, #5
 8002966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002968:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800296a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	68f9      	ldr	r1, [r7, #12]
 8002974:	69b8      	ldr	r0, [r7, #24]
 8002976:	f001 f8e7 	bl	8003b48 <pxPortInitialiseStack>
 800297a:	4602      	mov	r2, r0
 800297c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800298c:	bf00      	nop
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800299c:	f001 fa06 	bl	8003dac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029a0:	4b3a      	ldr	r3, [pc, #232]	@ (8002a8c <prvAddNewTaskToReadyList+0xf8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	4a39      	ldr	r2, [pc, #228]	@ (8002a8c <prvAddNewTaskToReadyList+0xf8>)
 80029a8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029aa:	4b39      	ldr	r3, [pc, #228]	@ (8002a90 <prvAddNewTaskToReadyList+0xfc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029b2:	4a37      	ldr	r2, [pc, #220]	@ (8002a90 <prvAddNewTaskToReadyList+0xfc>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029b8:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <prvAddNewTaskToReadyList+0xf8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d110      	bne.n	80029e2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029c0:	f000 fcfe 	bl	80033c0 <prvInitialiseTaskLists>
 80029c4:	e00d      	b.n	80029e2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029c6:	4b33      	ldr	r3, [pc, #204]	@ (8002a94 <prvAddNewTaskToReadyList+0x100>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029ce:	4b30      	ldr	r3, [pc, #192]	@ (8002a90 <prvAddNewTaskToReadyList+0xfc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	429a      	cmp	r2, r3
 80029da:	d802      	bhi.n	80029e2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002a90 <prvAddNewTaskToReadyList+0xfc>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a98 <prvAddNewTaskToReadyList+0x104>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002a98 <prvAddNewTaskToReadyList+0x104>)
 80029ea:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002a98 <prvAddNewTaskToReadyList+0x104>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	2201      	movs	r2, #1
 80029fa:	409a      	lsls	r2, r3
 80029fc:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <prvAddNewTaskToReadyList+0x108>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	4a26      	ldr	r2, [pc, #152]	@ (8002a9c <prvAddNewTaskToReadyList+0x108>)
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0a:	4925      	ldr	r1, [pc, #148]	@ (8002aa0 <prvAddNewTaskToReadyList+0x10c>)
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3304      	adds	r3, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	3204      	adds	r2, #4
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	1d1a      	adds	r2, r3, #4
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4a15      	ldr	r2, [pc, #84]	@ (8002aa0 <prvAddNewTaskToReadyList+0x10c>)
 8002a4a:	441a      	add	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	615a      	str	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a54:	4912      	ldr	r1, [pc, #72]	@ (8002aa0 <prvAddNewTaskToReadyList+0x10c>)
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	1c59      	adds	r1, r3, #1
 8002a64:	480e      	ldr	r0, [pc, #56]	@ (8002aa0 <prvAddNewTaskToReadyList+0x10c>)
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4403      	add	r3, r0
 8002a70:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a72:	f001 f9cd 	bl	8003e10 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a76:	4b07      	ldr	r3, [pc, #28]	@ (8002a94 <prvAddNewTaskToReadyList+0x100>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a7e:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <prvAddNewTaskToReadyList+0xfc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200001f0 	.word	0x200001f0
 8002a90:	20000118 	.word	0x20000118
 8002a94:	200001fc 	.word	0x200001fc
 8002a98:	2000020c 	.word	0x2000020c
 8002a9c:	200001f8 	.word	0x200001f8
 8002aa0:	2000011c 	.word	0x2000011c

08002aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002aaa:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <vTaskStartScheduler+0x88>)
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2282      	movs	r2, #130	@ 0x82
 8002ab6:	491e      	ldr	r1, [pc, #120]	@ (8002b30 <vTaskStartScheduler+0x8c>)
 8002ab8:	481e      	ldr	r0, [pc, #120]	@ (8002b34 <vTaskStartScheduler+0x90>)
 8002aba:	f7ff fe95 	bl	80027e8 <xTaskCreate>
 8002abe:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002ac6:	f000 fdb3 	bl	8003630 <xTimerCreateTimerTask>
 8002aca:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d116      	bne.n	8002b00 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	60bb      	str	r3, [r7, #8]
    }
 8002ae4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <vTaskStartScheduler+0x94>)
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002aee:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <vTaskStartScheduler+0x98>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002af4:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <vTaskStartScheduler+0x9c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002afa:	f001 f8b3 	bl	8003c64 <xPortStartScheduler>
 8002afe:	e00f      	b.n	8002b20 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d10b      	bne.n	8002b20 <vTaskStartScheduler+0x7c>
        __asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	607b      	str	r3, [r7, #4]
    }
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b20:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <vTaskStartScheduler+0xa0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000214 	.word	0x20000214
 8002b30:	08004cf8 	.word	0x08004cf8
 8002b34:	0800339d 	.word	0x0800339d
 8002b38:	20000210 	.word	0x20000210
 8002b3c:	200001fc 	.word	0x200001fc
 8002b40:	200001f4 	.word	0x200001f4
 8002b44:	2000000c 	.word	0x2000000c

08002b48 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <vTaskSuspendAll+0x18>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	4a03      	ldr	r2, [pc, #12]	@ (8002b60 <vTaskSuspendAll+0x18>)
 8002b54:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	20000218 	.word	0x20000218

08002b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b72:	4b6b      	ldr	r3, [pc, #428]	@ (8002d20 <xTaskResumeAll+0x1bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <xTaskResumeAll+0x2e>
        __asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	607b      	str	r3, [r7, #4]
    }
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	e7fd      	b.n	8002b8e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b92:	f001 f90b 	bl	8003dac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b96:	4b62      	ldr	r3, [pc, #392]	@ (8002d20 <xTaskResumeAll+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	4a60      	ldr	r2, [pc, #384]	@ (8002d20 <xTaskResumeAll+0x1bc>)
 8002b9e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ba0:	4b5f      	ldr	r3, [pc, #380]	@ (8002d20 <xTaskResumeAll+0x1bc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 80b4 	bne.w	8002d12 <xTaskResumeAll+0x1ae>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002baa:	4b5e      	ldr	r3, [pc, #376]	@ (8002d24 <xTaskResumeAll+0x1c0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80af 	beq.w	8002d12 <xTaskResumeAll+0x1ae>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bb4:	e08a      	b.n	8002ccc <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d28 <xTaskResumeAll+0x1c4>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	6a12      	ldr	r2, [r2, #32]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	69d2      	ldr	r2, [r2, #28]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	3318      	adds	r3, #24
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d103      	bne.n	8002bec <xTaskResumeAll+0x88>
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	1e5a      	subs	r2, r3, #1
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	6892      	ldr	r2, [r2, #8]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d103      	bne.n	8002c2a <xTaskResumeAll+0xc6>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	615a      	str	r2, [r3, #20]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	1e5a      	subs	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	2201      	movs	r2, #1
 8002c40:	409a      	lsls	r2, r3
 8002c42:	4b3a      	ldr	r3, [pc, #232]	@ (8002d2c <xTaskResumeAll+0x1c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	4a38      	ldr	r2, [pc, #224]	@ (8002d2c <xTaskResumeAll+0x1c8>)
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c50:	4937      	ldr	r1, [pc, #220]	@ (8002d30 <xTaskResumeAll+0x1cc>)
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	3204      	adds	r2, #4
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	1d1a      	adds	r2, r3, #4
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4a28      	ldr	r2, [pc, #160]	@ (8002d30 <xTaskResumeAll+0x1cc>)
 8002c90:	441a      	add	r2, r3
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	615a      	str	r2, [r3, #20]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c9a:	4925      	ldr	r1, [pc, #148]	@ (8002d30 <xTaskResumeAll+0x1cc>)
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	1c59      	adds	r1, r3, #1
 8002caa:	4821      	ldr	r0, [pc, #132]	@ (8002d30 <xTaskResumeAll+0x1cc>)
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4403      	add	r3, r0
 8002cb6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <xTaskResumeAll+0x1d0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <xTaskResumeAll+0x1d4>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ccc:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <xTaskResumeAll+0x1c4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f47f af70 	bne.w	8002bb6 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002cdc:	f000 fbee 	bl	80034bc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ce0:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <xTaskResumeAll+0x1d8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002cec:	f000 f838 	bl	8002d60 <xTaskIncrementTick>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	@ (8002d38 <xTaskResumeAll+0x1d4>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f1      	bne.n	8002cec <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8002d08:	4b0c      	ldr	r3, [pc, #48]	@ (8002d3c <xTaskResumeAll+0x1d8>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <xTaskResumeAll+0x1d4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d12:	f001 f87d 	bl	8003e10 <vPortExitCritical>

    return xAlreadyYielded;
 8002d16:	697b      	ldr	r3, [r7, #20]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000218 	.word	0x20000218
 8002d24:	200001f0 	.word	0x200001f0
 8002d28:	200001b0 	.word	0x200001b0
 8002d2c:	200001f8 	.word	0x200001f8
 8002d30:	2000011c 	.word	0x2000011c
 8002d34:	20000118 	.word	0x20000118
 8002d38:	20000204 	.word	0x20000204
 8002d3c:	20000200 	.word	0x20000200

08002d40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d46:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <xTaskGetTickCount+0x1c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d4c:	687b      	ldr	r3, [r7, #4]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	200001f4 	.word	0x200001f4

08002d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	@ 0x28
 8002d64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d6a:	4b6e      	ldr	r3, [pc, #440]	@ (8002f24 <xTaskIncrementTick+0x1c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 80ce 	bne.w	8002f10 <xTaskIncrementTick+0x1b0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d74:	4b6c      	ldr	r3, [pc, #432]	@ (8002f28 <xTaskIncrementTick+0x1c8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002f28 <xTaskIncrementTick+0x1c8>)
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d121      	bne.n	8002dcc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d88:	4b68      	ldr	r3, [pc, #416]	@ (8002f2c <xTaskIncrementTick+0x1cc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <xTaskIncrementTick+0x4a>
        __asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	607b      	str	r3, [r7, #4]
    }
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	e7fd      	b.n	8002da6 <xTaskIncrementTick+0x46>
 8002daa:	4b60      	ldr	r3, [pc, #384]	@ (8002f2c <xTaskIncrementTick+0x1cc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	4b5f      	ldr	r3, [pc, #380]	@ (8002f30 <xTaskIncrementTick+0x1d0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f2c <xTaskIncrementTick+0x1cc>)
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f30 <xTaskIncrementTick+0x1d0>)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002f34 <xTaskIncrementTick+0x1d4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4a5b      	ldr	r2, [pc, #364]	@ (8002f34 <xTaskIncrementTick+0x1d4>)
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	f000 fb78 	bl	80034bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002dcc:	4b5a      	ldr	r3, [pc, #360]	@ (8002f38 <xTaskIncrementTick+0x1d8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	f0c0 80a1 	bcc.w	8002f1a <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dd8:	4b54      	ldr	r3, [pc, #336]	@ (8002f2c <xTaskIncrementTick+0x1cc>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de2:	4b55      	ldr	r3, [pc, #340]	@ (8002f38 <xTaskIncrementTick+0x1d8>)
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	601a      	str	r2, [r3, #0]
                    break;
 8002dea:	e096      	b.n	8002f1a <xTaskIncrementTick+0x1ba>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dec:	4b4f      	ldr	r3, [pc, #316]	@ (8002f2c <xTaskIncrementTick+0x1cc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002dfc:	6a3a      	ldr	r2, [r7, #32]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d203      	bcs.n	8002e0c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e04:	4a4c      	ldr	r2, [pc, #304]	@ (8002f38 <xTaskIncrementTick+0x1d8>)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002e0a:	e086      	b.n	8002f1a <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	68d2      	ldr	r2, [r2, #12]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	6892      	ldr	r2, [r2, #8]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d103      	bne.n	8002e3a <xTaskIncrementTick+0xda>
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	615a      	str	r2, [r3, #20]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1e5a      	subs	r2, r3, #1
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01e      	beq.n	8002e90 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	6a12      	ldr	r2, [r2, #32]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	69d2      	ldr	r2, [r2, #28]
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	3318      	adds	r3, #24
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d103      	bne.n	8002e80 <xTaskIncrementTick+0x120>
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6a1a      	ldr	r2, [r3, #32]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2200      	movs	r2, #0
 8002e84:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	1e5a      	subs	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	2201      	movs	r2, #1
 8002e96:	409a      	lsls	r2, r3
 8002e98:	4b28      	ldr	r3, [pc, #160]	@ (8002f3c <xTaskIncrementTick+0x1dc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	4a27      	ldr	r2, [pc, #156]	@ (8002f3c <xTaskIncrementTick+0x1dc>)
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea6:	4926      	ldr	r1, [pc, #152]	@ (8002f40 <xTaskIncrementTick+0x1e0>)
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	3204      	adds	r2, #4
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1d1a      	adds	r2, r3, #4
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4a16      	ldr	r2, [pc, #88]	@ (8002f40 <xTaskIncrementTick+0x1e0>)
 8002ee6:	441a      	add	r2, r3
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	615a      	str	r2, [r3, #20]
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef0:	4913      	ldr	r1, [pc, #76]	@ (8002f40 <xTaskIncrementTick+0x1e0>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	1c59      	adds	r1, r3, #1
 8002f00:	480f      	ldr	r0, [pc, #60]	@ (8002f40 <xTaskIncrementTick+0x1e0>)
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4403      	add	r3, r0
 8002f0c:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f0e:	e763      	b.n	8002dd8 <xTaskIncrementTick+0x78>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <xTaskIncrementTick+0x1e4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3301      	adds	r3, #1
 8002f16:	4a0b      	ldr	r2, [pc, #44]	@ (8002f44 <xTaskIncrementTick+0x1e4>)
 8002f18:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3728      	adds	r7, #40	@ 0x28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000218 	.word	0x20000218
 8002f28:	200001f4 	.word	0x200001f4
 8002f2c:	200001a8 	.word	0x200001a8
 8002f30:	200001ac 	.word	0x200001ac
 8002f34:	20000208 	.word	0x20000208
 8002f38:	20000210 	.word	0x20000210
 8002f3c:	200001f8 	.word	0x200001f8
 8002f40:	2000011c 	.word	0x2000011c
 8002f44:	20000200 	.word	0x20000200

08002f48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f4e:	4b27      	ldr	r3, [pc, #156]	@ (8002fec <vTaskSwitchContext+0xa4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f56:	4b26      	ldr	r3, [pc, #152]	@ (8002ff0 <vTaskSwitchContext+0xa8>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002f5c:	e040      	b.n	8002fe0 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8002f5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ff0 <vTaskSwitchContext+0xa8>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f64:	4b23      	ldr	r3, [pc, #140]	@ (8002ff4 <vTaskSwitchContext+0xac>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f72:	7afb      	ldrb	r3, [r7, #11]
 8002f74:	f1c3 031f 	rsb	r3, r3, #31
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	491f      	ldr	r1, [pc, #124]	@ (8002ff8 <vTaskSwitchContext+0xb0>)
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <vTaskSwitchContext+0x5e>
        __asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	607b      	str	r3, [r7, #4]
    }
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	e7fd      	b.n	8002fa2 <vTaskSwitchContext+0x5a>
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4a11      	ldr	r2, [pc, #68]	@ (8002ff8 <vTaskSwitchContext+0xb0>)
 8002fb2:	4413      	add	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d104      	bne.n	8002fd6 <vTaskSwitchContext+0x8e>
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a07      	ldr	r2, [pc, #28]	@ (8002ffc <vTaskSwitchContext+0xb4>)
 8002fde:	6013      	str	r3, [r2, #0]
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	20000218 	.word	0x20000218
 8002ff0:	20000204 	.word	0x20000204
 8002ff4:	200001f8 	.word	0x200001f8
 8002ff8:	2000011c 	.word	0x2000011c
 8002ffc:	20000118 	.word	0x20000118

08003000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10b      	bne.n	8003028 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	60fb      	str	r3, [r7, #12]
    }
 8003022:	bf00      	nop
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003028:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <vTaskPlaceOnEventList+0x48>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3318      	adds	r3, #24
 800302e:	4619      	mov	r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff f896 	bl	8002162 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003036:	2101      	movs	r1, #1
 8003038:	6838      	ldr	r0, [r7, #0]
 800303a:	f000 fa79 	bl	8003530 <prvAddCurrentTaskToDelayedList>
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000118 	.word	0x20000118

0800304c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10b      	bne.n	8003076 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	613b      	str	r3, [r7, #16]
    }
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	e7fd      	b.n	8003072 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	4b15      	ldr	r3, [pc, #84]	@ (80030d4 <vTaskPlaceOnEventListRestricted+0x88>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	61da      	str	r2, [r3, #28]
 8003084:	4b13      	ldr	r3, [pc, #76]	@ (80030d4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	6892      	ldr	r2, [r2, #8]
 800308c:	621a      	str	r2, [r3, #32]
 800308e:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	3218      	adds	r2, #24
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	4b0e      	ldr	r3, [pc, #56]	@ (80030d4 <vTaskPlaceOnEventListRestricted+0x88>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f103 0218 	add.w	r2, r3, #24
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <vTaskPlaceOnEventListRestricted+0x88>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	68b8      	ldr	r0, [r7, #8]
 80030c8:	f000 fa32 	bl	8003530 <prvAddCurrentTaskToDelayedList>
    }
 80030cc:	bf00      	nop
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000118 	.word	0x20000118

080030d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030d8:	b480      	push	{r7}
 80030da:	b08b      	sub	sp, #44	@ 0x2c
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10b      	bne.n	8003106 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	60fb      	str	r3, [r7, #12]
    }
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	e7fd      	b.n	8003102 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	6a12      	ldr	r2, [r2, #32]
 8003114:	609a      	str	r2, [r3, #8]
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	6a3a      	ldr	r2, [r7, #32]
 800311c:	69d2      	ldr	r2, [r2, #28]
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	3318      	adds	r3, #24
 8003128:	429a      	cmp	r2, r3
 800312a:	d103      	bne.n	8003134 <xTaskRemoveFromEventList+0x5c>
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	6a1a      	ldr	r2, [r3, #32]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	2200      	movs	r2, #0
 8003138:	629a      	str	r2, [r3, #40]	@ 0x28
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	1e5a      	subs	r2, r3, #1
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003144:	4b4a      	ldr	r3, [pc, #296]	@ (8003270 <xTaskRemoveFromEventList+0x198>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d15e      	bne.n	800320a <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	6a3a      	ldr	r2, [r7, #32]
 8003158:	68d2      	ldr	r2, [r2, #12]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	6a3a      	ldr	r2, [r7, #32]
 8003162:	6892      	ldr	r2, [r2, #8]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	3304      	adds	r3, #4
 800316e:	429a      	cmp	r2, r3
 8003170:	d103      	bne.n	800317a <xTaskRemoveFromEventList+0xa2>
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	2200      	movs	r2, #0
 800317e:	615a      	str	r2, [r3, #20]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	1e5a      	subs	r2, r3, #1
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	2201      	movs	r2, #1
 8003190:	409a      	lsls	r2, r3
 8003192:	4b38      	ldr	r3, [pc, #224]	@ (8003274 <xTaskRemoveFromEventList+0x19c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	4a36      	ldr	r2, [pc, #216]	@ (8003274 <xTaskRemoveFromEventList+0x19c>)
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a0:	4935      	ldr	r1, [pc, #212]	@ (8003278 <xTaskRemoveFromEventList+0x1a0>)
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3304      	adds	r3, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	3204      	adds	r2, #4
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	1d1a      	adds	r2, r3, #4
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4a26      	ldr	r2, [pc, #152]	@ (8003278 <xTaskRemoveFromEventList+0x1a0>)
 80031e0:	441a      	add	r2, r3
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	615a      	str	r2, [r3, #20]
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ea:	4923      	ldr	r1, [pc, #140]	@ (8003278 <xTaskRemoveFromEventList+0x1a0>)
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1c59      	adds	r1, r3, #1
 80031fa:	481f      	ldr	r0, [pc, #124]	@ (8003278 <xTaskRemoveFromEventList+0x1a0>)
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4403      	add	r3, r0
 8003206:	6019      	str	r1, [r3, #0]
 8003208:	e01b      	b.n	8003242 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800320a:	4b1c      	ldr	r3, [pc, #112]	@ (800327c <xTaskRemoveFromEventList+0x1a4>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	61da      	str	r2, [r3, #28]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	621a      	str	r2, [r3, #32]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	6a3a      	ldr	r2, [r7, #32]
 8003224:	3218      	adds	r2, #24
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f103 0218 	add.w	r2, r3, #24
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	4a11      	ldr	r2, [pc, #68]	@ (800327c <xTaskRemoveFromEventList+0x1a4>)
 8003236:	629a      	str	r2, [r3, #40]	@ 0x28
 8003238:	4b10      	ldr	r3, [pc, #64]	@ (800327c <xTaskRemoveFromEventList+0x1a4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	4a0f      	ldr	r2, [pc, #60]	@ (800327c <xTaskRemoveFromEventList+0x1a4>)
 8003240:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003246:	4b0e      	ldr	r3, [pc, #56]	@ (8003280 <xTaskRemoveFromEventList+0x1a8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	429a      	cmp	r2, r3
 800324e:	d905      	bls.n	800325c <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003250:	2301      	movs	r3, #1
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <xTaskRemoveFromEventList+0x1ac>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e001      	b.n	8003260 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 800325c:	2300      	movs	r3, #0
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003262:	4618      	mov	r0, r3
 8003264:	372c      	adds	r7, #44	@ 0x2c
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000218 	.word	0x20000218
 8003274:	200001f8 	.word	0x200001f8
 8003278:	2000011c 	.word	0x2000011c
 800327c:	200001b0 	.word	0x200001b0
 8003280:	20000118 	.word	0x20000118
 8003284:	20000204 	.word	0x20000204

08003288 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <vTaskInternalSetTimeOutState+0x24>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <vTaskInternalSetTimeOutState+0x28>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	605a      	str	r2, [r3, #4]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	20000208 	.word	0x20000208
 80032b0:	200001f4 	.word	0x200001f4

080032b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	613b      	str	r3, [r7, #16]
    }
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	60fb      	str	r3, [r7, #12]
    }
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	e7fd      	b.n	80032f6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80032fa:	f000 fd57 	bl	8003dac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80032fe:	4b1f      	ldr	r3, [pc, #124]	@ (800337c <xTaskCheckForTimeOut+0xc8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003316:	d102      	bne.n	800331e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	e026      	b.n	800336c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b17      	ldr	r3, [pc, #92]	@ (8003380 <xTaskCheckForTimeOut+0xcc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d00a      	beq.n	8003340 <xTaskCheckForTimeOut+0x8c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	429a      	cmp	r2, r3
 8003332:	d305      	bcc.n	8003340 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003334:	2301      	movs	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e015      	b.n	800336c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	429a      	cmp	r2, r3
 8003348:	d20b      	bcs.n	8003362 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	1ad2      	subs	r2, r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ff96 	bl	8003288 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800335c:	2300      	movs	r3, #0
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	e004      	b.n	800336c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003368:	2301      	movs	r3, #1
 800336a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800336c:	f000 fd50 	bl	8003e10 <vPortExitCritical>

    return xReturn;
 8003370:	69fb      	ldr	r3, [r7, #28]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3720      	adds	r7, #32
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	200001f4 	.word	0x200001f4
 8003380:	20000208 	.word	0x20000208

08003384 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003388:	4b03      	ldr	r3, [pc, #12]	@ (8003398 <vTaskMissedYield+0x14>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000204 	.word	0x20000204

0800339c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80033a4:	f000 f84c 	bl	8003440 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80033a8:	4b04      	ldr	r3, [pc, #16]	@ (80033bc <prvIdleTask+0x20>)
 80033aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80033b8:	bf00      	nop
 80033ba:	e7f3      	b.n	80033a4 <prvIdleTask+0x8>
 80033bc:	e000ed04 	.word	0xe000ed04

080033c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	e00c      	b.n	80033e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4a12      	ldr	r2, [pc, #72]	@ (8003420 <prvInitialiseTaskLists+0x60>)
 80033d8:	4413      	add	r3, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe fe94 	bl	8002108 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3301      	adds	r3, #1
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d9ef      	bls.n	80033cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80033ec:	480d      	ldr	r0, [pc, #52]	@ (8003424 <prvInitialiseTaskLists+0x64>)
 80033ee:	f7fe fe8b 	bl	8002108 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80033f2:	480d      	ldr	r0, [pc, #52]	@ (8003428 <prvInitialiseTaskLists+0x68>)
 80033f4:	f7fe fe88 	bl	8002108 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80033f8:	480c      	ldr	r0, [pc, #48]	@ (800342c <prvInitialiseTaskLists+0x6c>)
 80033fa:	f7fe fe85 	bl	8002108 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80033fe:	480c      	ldr	r0, [pc, #48]	@ (8003430 <prvInitialiseTaskLists+0x70>)
 8003400:	f7fe fe82 	bl	8002108 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003404:	480b      	ldr	r0, [pc, #44]	@ (8003434 <prvInitialiseTaskLists+0x74>)
 8003406:	f7fe fe7f 	bl	8002108 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800340a:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <prvInitialiseTaskLists+0x78>)
 800340c:	4a05      	ldr	r2, [pc, #20]	@ (8003424 <prvInitialiseTaskLists+0x64>)
 800340e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003410:	4b0a      	ldr	r3, [pc, #40]	@ (800343c <prvInitialiseTaskLists+0x7c>)
 8003412:	4a05      	ldr	r2, [pc, #20]	@ (8003428 <prvInitialiseTaskLists+0x68>)
 8003414:	601a      	str	r2, [r3, #0]
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	2000011c 	.word	0x2000011c
 8003424:	20000180 	.word	0x20000180
 8003428:	20000194 	.word	0x20000194
 800342c:	200001b0 	.word	0x200001b0
 8003430:	200001c4 	.word	0x200001c4
 8003434:	200001dc 	.word	0x200001dc
 8003438:	200001a8 	.word	0x200001a8
 800343c:	200001ac 	.word	0x200001ac

08003440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003446:	e019      	b.n	800347c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003448:	f000 fcb0 	bl	8003dac <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800344c:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <prvCheckTasksWaitingTermination+0x50>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3304      	adds	r3, #4
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe febb 	bl	80021d4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800345e:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <prvCheckTasksWaitingTermination+0x54>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3b01      	subs	r3, #1
 8003464:	4a0b      	ldr	r2, [pc, #44]	@ (8003494 <prvCheckTasksWaitingTermination+0x54>)
 8003466:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003468:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <prvCheckTasksWaitingTermination+0x58>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3b01      	subs	r3, #1
 800346e:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <prvCheckTasksWaitingTermination+0x58>)
 8003470:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003472:	f000 fccd 	bl	8003e10 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f810 	bl	800349c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <prvCheckTasksWaitingTermination+0x58>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e1      	bne.n	8003448 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	200001c4 	.word	0x200001c4
 8003494:	200001f0 	.word	0x200001f0
 8003498:	200001d8 	.word	0x200001d8

0800349c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fe23 	bl	80040f4 <vPortFree>
            vPortFree( pxTCB );
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fe20 	bl	80040f4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034c0:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <prvResetNextTaskUnblockTime+0x30>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d104      	bne.n	80034d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80034ca:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <prvResetNextTaskUnblockTime+0x34>)
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295
 80034d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80034d2:	e005      	b.n	80034e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034d4:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <prvResetNextTaskUnblockTime+0x30>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a04      	ldr	r2, [pc, #16]	@ (80034f0 <prvResetNextTaskUnblockTime+0x34>)
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	200001a8 	.word	0x200001a8
 80034f0:	20000210 	.word	0x20000210

080034f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80034fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <xTaskGetSchedulerState+0x34>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003502:	2301      	movs	r3, #1
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	e008      	b.n	800351a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003508:	4b08      	ldr	r3, [pc, #32]	@ (800352c <xTaskGetSchedulerState+0x38>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003510:	2302      	movs	r3, #2
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	e001      	b.n	800351a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800351a:	687b      	ldr	r3, [r7, #4]
    }
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	200001fc 	.word	0x200001fc
 800352c:	20000218 	.word	0x20000218

08003530 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800353a:	4b36      	ldr	r3, [pc, #216]	@ (8003614 <prvAddCurrentTaskToDelayedList+0xe4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003540:	4b35      	ldr	r3, [pc, #212]	@ (8003618 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3304      	adds	r3, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe fe44 	bl	80021d4 <uxListRemove>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003552:	4b31      	ldr	r3, [pc, #196]	@ (8003618 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003558:	2201      	movs	r2, #1
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	4b2e      	ldr	r3, [pc, #184]	@ (800361c <prvAddCurrentTaskToDelayedList+0xec>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4013      	ands	r3, r2
 8003566:	4a2d      	ldr	r2, [pc, #180]	@ (800361c <prvAddCurrentTaskToDelayedList+0xec>)
 8003568:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d124      	bne.n	80035bc <prvAddCurrentTaskToDelayedList+0x8c>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d021      	beq.n	80035bc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003578:	4b29      	ldr	r3, [pc, #164]	@ (8003620 <prvAddCurrentTaskToDelayedList+0xf0>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	609a      	str	r2, [r3, #8]
 8003586:	4b24      	ldr	r3, [pc, #144]	@ (8003618 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	6892      	ldr	r2, [r2, #8]
 800358e:	60da      	str	r2, [r3, #12]
 8003590:	4b21      	ldr	r3, [pc, #132]	@ (8003618 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	3204      	adds	r2, #4
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	4b1e      	ldr	r3, [pc, #120]	@ (8003618 <prvAddCurrentTaskToDelayedList+0xe8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	1d1a      	adds	r2, r3, #4
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003618 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003620 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035ac:	615a      	str	r2, [r3, #20]
 80035ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003620 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003620 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80035ba:	e026      	b.n	800360a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035c4:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d209      	bcs.n	80035e8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035d4:	4b13      	ldr	r3, [pc, #76]	@ (8003624 <prvAddCurrentTaskToDelayedList+0xf4>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3304      	adds	r3, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	4610      	mov	r0, r2
 80035e2:	f7fe fdbe 	bl	8002162 <vListInsert>
}
 80035e6:	e010      	b.n	800360a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <prvAddCurrentTaskToDelayedList+0xf8>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003618 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3304      	adds	r3, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7fe fdb4 	bl	8002162 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80035fa:	4b0c      	ldr	r3, [pc, #48]	@ (800362c <prvAddCurrentTaskToDelayedList+0xfc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	429a      	cmp	r2, r3
 8003602:	d202      	bcs.n	800360a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003604:	4a09      	ldr	r2, [pc, #36]	@ (800362c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6013      	str	r3, [r2, #0]
}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	200001f4 	.word	0x200001f4
 8003618:	20000118 	.word	0x20000118
 800361c:	200001f8 	.word	0x200001f8
 8003620:	200001dc 	.word	0x200001dc
 8003624:	200001ac 	.word	0x200001ac
 8003628:	200001a8 	.word	0x200001a8
 800362c:	20000210 	.word	0x20000210

08003630 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800363a:	f000 fa4f 	bl	8003adc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800363e:	4b12      	ldr	r3, [pc, #72]	@ (8003688 <xTimerCreateTimerTask+0x58>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00b      	beq.n	800365e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003646:	4b11      	ldr	r3, [pc, #68]	@ (800368c <xTimerCreateTimerTask+0x5c>)
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	2302      	movs	r3, #2
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2300      	movs	r3, #0
 8003650:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003654:	490e      	ldr	r1, [pc, #56]	@ (8003690 <xTimerCreateTimerTask+0x60>)
 8003656:	480f      	ldr	r0, [pc, #60]	@ (8003694 <xTimerCreateTimerTask+0x64>)
 8003658:	f7ff f8c6 	bl	80027e8 <xTaskCreate>
 800365c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	603b      	str	r3, [r7, #0]
    }
 8003676:	bf00      	nop
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800367c:	687b      	ldr	r3, [r7, #4]
    }
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	2000024c 	.word	0x2000024c
 800368c:	20000250 	.word	0x20000250
 8003690:	08004d00 	.word	0x08004d00
 8003694:	0800373d 	.word	0x0800373d

08003698 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80036a4:	e008      	b.n	80036b8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4413      	add	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	18d1      	adds	r1, r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f8df 	bl	8003888 <prvInsertTimerInActiveList>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ea      	bne.n	80036a6 <prvReloadTimer+0xe>
        }
    }
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e6:	4b14      	ldr	r3, [pc, #80]	@ (8003738 <prvProcessExpiredTimer+0x5c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe fd6d 	bl	80021d4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff ffc3 	bl	8003698 <prvReloadTimer>
 8003712:	e008      	b.n	8003726 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	4798      	blx	r3
    }
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000244 	.word	0x20000244

0800373c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003744:	f107 0308 	add.w	r3, r7, #8
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f859 	bl	8003800 <prvGetNextExpireTime>
 800374e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4619      	mov	r1, r3
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f805 	bl	8003764 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800375a:	f000 f8d7 	bl	800390c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800375e:	bf00      	nop
 8003760:	e7f0      	b.n	8003744 <prvTimerTask+0x8>
	...

08003764 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800376e:	f7ff f9eb 	bl	8002b48 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f866 	bl	8003848 <prvSampleTimeNow>
 800377c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d130      	bne.n	80037e6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <prvProcessTimerOrBlockTask+0x3c>
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	429a      	cmp	r2, r3
 8003790:	d806      	bhi.n	80037a0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003792:	f7ff f9e7 	bl	8002b64 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003796:	68f9      	ldr	r1, [r7, #12]
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff ff9f 	bl	80036dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800379e:	e024      	b.n	80037ea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037a6:	4b13      	ldr	r3, [pc, #76]	@ (80037f4 <prvProcessTimerOrBlockTask+0x90>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <prvProcessTimerOrBlockTask+0x50>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <prvProcessTimerOrBlockTask+0x52>
 80037b4:	2300      	movs	r3, #0
 80037b6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80037b8:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <prvProcessTimerOrBlockTask+0x94>)
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	4619      	mov	r1, r3
 80037c6:	f7fe ffdb 	bl	8002780 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80037ca:	f7ff f9cb 	bl	8002b64 <xTaskResumeAll>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80037d4:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <prvProcessTimerOrBlockTask+0x98>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
    }
 80037e4:	e001      	b.n	80037ea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80037e6:	f7ff f9bd 	bl	8002b64 <xTaskResumeAll>
    }
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000248 	.word	0x20000248
 80037f8:	2000024c 	.word	0x2000024c
 80037fc:	e000ed04 	.word	0xe000ed04

08003800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003808:	4b0e      	ldr	r3, [pc, #56]	@ (8003844 <prvGetNextExpireTime+0x44>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <prvGetNextExpireTime+0x16>
 8003812:	2201      	movs	r2, #1
 8003814:	e000      	b.n	8003818 <prvGetNextExpireTime+0x18>
 8003816:	2200      	movs	r2, #0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003824:	4b07      	ldr	r3, [pc, #28]	@ (8003844 <prvGetNextExpireTime+0x44>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e001      	b.n	8003834 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003834:	68fb      	ldr	r3, [r7, #12]
    }
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000244 	.word	0x20000244

08003848 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003850:	f7ff fa76 	bl	8002d40 <xTaskGetTickCount>
 8003854:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003856:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <prvSampleTimeNow+0x3c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	429a      	cmp	r2, r3
 800385e:	d205      	bcs.n	800386c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003860:	f000 f916 	bl	8003a90 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e002      	b.n	8003872 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003872:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <prvSampleTimeNow+0x3c>)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003878:	68fb      	ldr	r3, [r7, #12]
    }
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000254 	.word	0x20000254

08003888 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d812      	bhi.n	80038d4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	1ad2      	subs	r2, r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d302      	bcc.n	80038c2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80038bc:	2301      	movs	r3, #1
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	e01b      	b.n	80038fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <prvInsertTimerInActiveList+0x7c>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f7fe fc48 	bl	8002162 <vListInsert>
 80038d2:	e012      	b.n	80038fa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d206      	bcs.n	80038ea <prvInsertTimerInActiveList+0x62>
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80038e4:	2301      	movs	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e007      	b.n	80038fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038ea:	4b07      	ldr	r3, [pc, #28]	@ (8003908 <prvInsertTimerInActiveList+0x80>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7fe fc34 	bl	8002162 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80038fa:	697b      	ldr	r3, [r7, #20]
    }
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000248 	.word	0x20000248
 8003908:	20000244 	.word	0x20000244

0800390c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003912:	e0a9      	b.n	8003a68 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f2c0 80a6 	blt.w	8003a68 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	3304      	adds	r3, #4
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fc51 	bl	80021d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003932:	1d3b      	adds	r3, r7, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff87 	bl	8003848 <prvSampleTimeNow>
 800393a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	3b01      	subs	r3, #1
 8003940:	2b08      	cmp	r3, #8
 8003942:	f200 808e 	bhi.w	8003a62 <prvProcessReceivedCommands+0x156>
 8003946:	a201      	add	r2, pc, #4	@ (adr r2, 800394c <prvProcessReceivedCommands+0x40>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	08003971 	.word	0x08003971
 8003950:	08003971 	.word	0x08003971
 8003954:	080039d9 	.word	0x080039d9
 8003958:	080039ed 	.word	0x080039ed
 800395c:	08003a39 	.word	0x08003a39
 8003960:	08003971 	.word	0x08003971
 8003964:	08003971 	.word	0x08003971
 8003968:	080039d9 	.word	0x080039d9
 800396c:	080039ed 	.word	0x080039ed
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	18d1      	adds	r1, r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	69f8      	ldr	r0, [r7, #28]
 8003990:	f7ff ff7a 	bl	8003888 <prvInsertTimerInActiveList>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d065      	beq.n	8003a66 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	4413      	add	r3, r2
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4619      	mov	r1, r3
 80039b4:	69f8      	ldr	r0, [r7, #28]
 80039b6:	f7ff fe6f 	bl	8003698 <prvReloadTimer>
 80039ba:	e008      	b.n	80039ce <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	69f8      	ldr	r0, [r7, #28]
 80039d4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80039d6:	e046      	b.n	8003a66 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80039ea:	e03d      	b.n	8003a68 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	617b      	str	r3, [r7, #20]
    }
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	e7fd      	b.n	8003a20 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	18d1      	adds	r1, r2, r3
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	69f8      	ldr	r0, [r7, #28]
 8003a32:	f7ff ff29 	bl	8003888 <prvInsertTimerInActiveList>
                        break;
 8003a36:	e017      	b.n	8003a68 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003a46:	69f8      	ldr	r0, [r7, #28]
 8003a48:	f000 fb54 	bl	80040f4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a4c:	e00c      	b.n	8003a68 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003a60:	e002      	b.n	8003a68 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <prvProcessReceivedCommands+0x15c>
                        break;
 8003a66:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a68:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <prvProcessReceivedCommands+0x180>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f107 0108 	add.w	r1, r7, #8
 8003a70:	2200      	movs	r2, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fcce 	bl	8002414 <xQueueReceive>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f47f af4a 	bne.w	8003914 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	2000024c 	.word	0x2000024c

08003a90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a96:	e009      	b.n	8003aac <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a98:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad4 <prvSwitchTimerLists+0x44>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003aa2:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa6:	6838      	ldr	r0, [r7, #0]
 8003aa8:	f7ff fe18 	bl	80036dc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003aac:	4b09      	ldr	r3, [pc, #36]	@ (8003ad4 <prvSwitchTimerLists+0x44>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003ab6:	4b07      	ldr	r3, [pc, #28]	@ (8003ad4 <prvSwitchTimerLists+0x44>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003abc:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <prvSwitchTimerLists+0x48>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <prvSwitchTimerLists+0x44>)
 8003ac2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003ac4:	4a04      	ldr	r2, [pc, #16]	@ (8003ad8 <prvSwitchTimerLists+0x48>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6013      	str	r3, [r2, #0]
    }
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000244 	.word	0x20000244
 8003ad8:	20000248 	.word	0x20000248

08003adc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ae0:	f000 f964 	bl	8003dac <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003ae4:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <prvCheckForValidListAndQueue+0x54>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11d      	bne.n	8003b28 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003aec:	4811      	ldr	r0, [pc, #68]	@ (8003b34 <prvCheckForValidListAndQueue+0x58>)
 8003aee:	f7fe fb0b 	bl	8002108 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003af2:	4811      	ldr	r0, [pc, #68]	@ (8003b38 <prvCheckForValidListAndQueue+0x5c>)
 8003af4:	f7fe fb08 	bl	8002108 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003af8:	4b10      	ldr	r3, [pc, #64]	@ (8003b3c <prvCheckForValidListAndQueue+0x60>)
 8003afa:	4a0e      	ldr	r2, [pc, #56]	@ (8003b34 <prvCheckForValidListAndQueue+0x58>)
 8003afc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003afe:	4b10      	ldr	r3, [pc, #64]	@ (8003b40 <prvCheckForValidListAndQueue+0x64>)
 8003b00:	4a0d      	ldr	r2, [pc, #52]	@ (8003b38 <prvCheckForValidListAndQueue+0x5c>)
 8003b02:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003b04:	2200      	movs	r2, #0
 8003b06:	210c      	movs	r1, #12
 8003b08:	200a      	movs	r0, #10
 8003b0a:	f7fe fc11 	bl	8002330 <xQueueGenericCreate>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4a07      	ldr	r2, [pc, #28]	@ (8003b30 <prvCheckForValidListAndQueue+0x54>)
 8003b12:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003b14:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <prvCheckForValidListAndQueue+0x54>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b1c:	4b04      	ldr	r3, [pc, #16]	@ (8003b30 <prvCheckForValidListAndQueue+0x54>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4908      	ldr	r1, [pc, #32]	@ (8003b44 <prvCheckForValidListAndQueue+0x68>)
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fddc 	bl	80026e0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b28:	f000 f972 	bl	8003e10 <vPortExitCritical>
    }
 8003b2c:	bf00      	nop
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	2000024c 	.word	0x2000024c
 8003b34:	2000021c 	.word	0x2000021c
 8003b38:	20000230 	.word	0x20000230
 8003b3c:	20000244 	.word	0x20000244
 8003b40:	20000248 	.word	0x20000248
 8003b44:	08004d08 	.word	0x08004d08

08003b48 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3b04      	subs	r3, #4
 8003b58:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3b04      	subs	r3, #4
 8003b66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f023 0201 	bic.w	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3b04      	subs	r3, #4
 8003b76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b78:	4a0c      	ldr	r2, [pc, #48]	@ (8003bac <pxPortInitialiseStack+0x64>)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3b14      	subs	r3, #20
 8003b82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3b04      	subs	r3, #4
 8003b8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f06f 0202 	mvn.w	r2, #2
 8003b96:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3b20      	subs	r3, #32
 8003b9c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	08003bb1 	.word	0x08003bb1

08003bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003bba:	4b13      	ldr	r3, [pc, #76]	@ (8003c08 <prvTaskExitError+0x58>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d00b      	beq.n	8003bdc <prvTaskExitError+0x2c>
        __asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60fb      	str	r3, [r7, #12]
    }
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <prvTaskExitError+0x28>
        __asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	60bb      	str	r3, [r7, #8]
    }
 8003bee:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003bf0:	bf00      	nop
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0fc      	beq.n	8003bf2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000010 	.word	0x20000010
 8003c0c:	00000000 	.word	0x00000000

08003c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003c10:	4b07      	ldr	r3, [pc, #28]	@ (8003c30 <pxCurrentTCBConst2>)
 8003c12:	6819      	ldr	r1, [r3, #0]
 8003c14:	6808      	ldr	r0, [r1, #0]
 8003c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c1a:	f380 8809 	msr	PSP, r0
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f380 8811 	msr	BASEPRI, r0
 8003c2a:	4770      	bx	lr
 8003c2c:	f3af 8000 	nop.w

08003c30 <pxCurrentTCBConst2>:
 8003c30:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop

08003c38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003c38:	4808      	ldr	r0, [pc, #32]	@ (8003c5c <prvPortStartFirstTask+0x24>)
 8003c3a:	6800      	ldr	r0, [r0, #0]
 8003c3c:	6800      	ldr	r0, [r0, #0]
 8003c3e:	f380 8808 	msr	MSP, r0
 8003c42:	f04f 0000 	mov.w	r0, #0
 8003c46:	f380 8814 	msr	CONTROL, r0
 8003c4a:	b662      	cpsie	i
 8003c4c:	b661      	cpsie	f
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	df00      	svc	0
 8003c58:	bf00      	nop
 8003c5a:	0000      	.short	0x0000
 8003c5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop

08003c64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c6a:	4b47      	ldr	r3, [pc, #284]	@ (8003d88 <xPortStartScheduler+0x124>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a47      	ldr	r2, [pc, #284]	@ (8003d8c <xPortStartScheduler+0x128>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d10b      	bne.n	8003c8c <xPortStartScheduler+0x28>
        __asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	613b      	str	r3, [r7, #16]
    }
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d88 <xPortStartScheduler+0x124>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3f      	ldr	r2, [pc, #252]	@ (8003d90 <xPortStartScheduler+0x12c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10b      	bne.n	8003cae <xPortStartScheduler+0x4a>
        __asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	60fb      	str	r3, [r7, #12]
    }
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	e7fd      	b.n	8003caa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cae:	4b39      	ldr	r3, [pc, #228]	@ (8003d94 <xPortStartScheduler+0x130>)
 8003cb0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	22ff      	movs	r2, #255	@ 0xff
 8003cbe:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4b31      	ldr	r3, [pc, #196]	@ (8003d98 <xPortStartScheduler+0x134>)
 8003cd4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cd6:	4b31      	ldr	r3, [pc, #196]	@ (8003d9c <xPortStartScheduler+0x138>)
 8003cd8:	2207      	movs	r2, #7
 8003cda:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cdc:	e009      	b.n	8003cf2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003cde:	4b2f      	ldr	r3, [pc, #188]	@ (8003d9c <xPortStartScheduler+0x138>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8003d9c <xPortStartScheduler+0x138>)
 8003ce6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfa:	2b80      	cmp	r3, #128	@ 0x80
 8003cfc:	d0ef      	beq.n	8003cde <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cfe:	4b27      	ldr	r3, [pc, #156]	@ (8003d9c <xPortStartScheduler+0x138>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1c3 0307 	rsb	r3, r3, #7
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d00b      	beq.n	8003d22 <xPortStartScheduler+0xbe>
        __asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	60bb      	str	r3, [r7, #8]
    }
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	e7fd      	b.n	8003d1e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d22:	4b1e      	ldr	r3, [pc, #120]	@ (8003d9c <xPortStartScheduler+0x138>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	4a1c      	ldr	r2, [pc, #112]	@ (8003d9c <xPortStartScheduler+0x138>)
 8003d2a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d9c <xPortStartScheduler+0x138>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d34:	4a19      	ldr	r2, [pc, #100]	@ (8003d9c <xPortStartScheduler+0x138>)
 8003d36:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003d40:	4b17      	ldr	r3, [pc, #92]	@ (8003da0 <xPortStartScheduler+0x13c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a16      	ldr	r2, [pc, #88]	@ (8003da0 <xPortStartScheduler+0x13c>)
 8003d46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d4a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003d4c:	4b14      	ldr	r3, [pc, #80]	@ (8003da0 <xPortStartScheduler+0x13c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a13      	ldr	r2, [pc, #76]	@ (8003da0 <xPortStartScheduler+0x13c>)
 8003d52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003d56:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003d58:	f000 f8e0 	bl	8003f1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003d5c:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <xPortStartScheduler+0x140>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003d62:	f000 f8ff 	bl	8003f64 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d66:	4b10      	ldr	r3, [pc, #64]	@ (8003da8 <xPortStartScheduler+0x144>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8003da8 <xPortStartScheduler+0x144>)
 8003d6c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003d70:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003d72:	f7ff ff61 	bl	8003c38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d76:	f7ff f8e7 	bl	8002f48 <vTaskSwitchContext>
    prvTaskExitError();
 8003d7a:	f7ff ff19 	bl	8003bb0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	e000ed00 	.word	0xe000ed00
 8003d8c:	410fc271 	.word	0x410fc271
 8003d90:	410fc270 	.word	0x410fc270
 8003d94:	e000e400 	.word	0xe000e400
 8003d98:	20000258 	.word	0x20000258
 8003d9c:	2000025c 	.word	0x2000025c
 8003da0:	e000ed20 	.word	0xe000ed20
 8003da4:	20000010 	.word	0x20000010
 8003da8:	e000ef34 	.word	0xe000ef34

08003dac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
        __asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	607b      	str	r3, [r7, #4]
    }
 8003dc4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003dc6:	4b10      	ldr	r3, [pc, #64]	@ (8003e08 <vPortEnterCritical+0x5c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8003e08 <vPortEnterCritical+0x5c>)
 8003dce:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <vPortEnterCritical+0x5c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d110      	bne.n	8003dfa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e0c <vPortEnterCritical+0x60>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <vPortEnterCritical+0x4e>
        __asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	603b      	str	r3, [r7, #0]
    }
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	e7fd      	b.n	8003df6 <vPortEnterCritical+0x4a>
    }
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000010 	.word	0x20000010
 8003e0c:	e000ed04 	.word	0xe000ed04

08003e10 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003e16:	4b12      	ldr	r3, [pc, #72]	@ (8003e60 <vPortExitCritical+0x50>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <vPortExitCritical+0x26>
        __asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
    }
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	e7fd      	b.n	8003e32 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e36:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <vPortExitCritical+0x50>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	4a08      	ldr	r2, [pc, #32]	@ (8003e60 <vPortExitCritical+0x50>)
 8003e3e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e40:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <vPortExitCritical+0x50>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <vPortExitCritical+0x44>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e52:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	20000010 	.word	0x20000010
	...

08003e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e70:	f3ef 8009 	mrs	r0, PSP
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <pxCurrentTCBConst>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	f01e 0f10 	tst.w	lr, #16
 8003e80:	bf08      	it	eq
 8003e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8a:	6010      	str	r0, [r2, #0]
 8003e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e94:	f380 8811 	msr	BASEPRI, r0
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f7ff f852 	bl	8002f48 <vTaskSwitchContext>
 8003ea4:	f04f 0000 	mov.w	r0, #0
 8003ea8:	f380 8811 	msr	BASEPRI, r0
 8003eac:	bc09      	pop	{r0, r3}
 8003eae:	6819      	ldr	r1, [r3, #0]
 8003eb0:	6808      	ldr	r0, [r1, #0]
 8003eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb6:	f01e 0f10 	tst.w	lr, #16
 8003eba:	bf08      	it	eq
 8003ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ec0:	f380 8809 	msr	PSP, r0
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	f3af 8000 	nop.w

08003ed0 <pxCurrentTCBConst>:
 8003ed0:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop

08003ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
        __asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	607b      	str	r3, [r7, #4]
    }
 8003ef0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ef2:	f7fe ff35 	bl	8002d60 <xTaskIncrementTick>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003efc:	4b06      	ldr	r3, [pc, #24]	@ (8003f18 <SysTick_Handler+0x40>)
 8003efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	2300      	movs	r3, #0
 8003f06:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f383 8811 	msr	BASEPRI, r3
    }
 8003f0e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f20:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <vPortSetupTimerInterrupt+0x34>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f26:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <vPortSetupTimerInterrupt+0x38>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f58 <vPortSetupTimerInterrupt+0x3c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0a      	ldr	r2, [pc, #40]	@ (8003f5c <vPortSetupTimerInterrupt+0x40>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	099b      	lsrs	r3, r3, #6
 8003f38:	4a09      	ldr	r2, [pc, #36]	@ (8003f60 <vPortSetupTimerInterrupt+0x44>)
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f3e:	4b04      	ldr	r3, [pc, #16]	@ (8003f50 <vPortSetupTimerInterrupt+0x34>)
 8003f40:	2207      	movs	r2, #7
 8003f42:	601a      	str	r2, [r3, #0]
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	e000e010 	.word	0xe000e010
 8003f54:	e000e018 	.word	0xe000e018
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	10624dd3 	.word	0x10624dd3
 8003f60:	e000e014 	.word	0xe000e014

08003f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003f74 <vPortEnableVFP+0x10>
 8003f68:	6801      	ldr	r1, [r0, #0]
 8003f6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003f6e:	6001      	str	r1, [r0, #0]
 8003f70:	4770      	bx	lr
 8003f72:	0000      	.short	0x0000
 8003f74:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop

08003f7c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	@ 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003f88:	f7fe fdde 	bl	8002b48 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f8c:	4b54      	ldr	r3, [pc, #336]	@ (80040e0 <pvPortMalloc+0x164>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003f94:	f000 f90c 	bl	80041b0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d012      	beq.n	8003fc4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	3308      	adds	r3, #8
 8003faa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d804      	bhi.n	8003fc0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	4413      	add	r3, r2
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	e001      	b.n	8003fc4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	db71      	blt.n	80040ae <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d06e      	beq.n	80040ae <pvPortMalloc+0x132>
 8003fd0:	4b44      	ldr	r3, [pc, #272]	@ (80040e4 <pvPortMalloc+0x168>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d869      	bhi.n	80040ae <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003fda:	4b43      	ldr	r3, [pc, #268]	@ (80040e8 <pvPortMalloc+0x16c>)
 8003fdc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003fde:	4b42      	ldr	r3, [pc, #264]	@ (80040e8 <pvPortMalloc+0x16c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fe4:	e004      	b.n	8003ff0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d903      	bls.n	8004002 <pvPortMalloc+0x86>
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f1      	bne.n	8003fe6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004002:	4b37      	ldr	r3, [pc, #220]	@ (80040e0 <pvPortMalloc+0x164>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004008:	429a      	cmp	r2, r3
 800400a:	d050      	beq.n	80040ae <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2208      	movs	r2, #8
 8004012:	4413      	add	r3, r2
 8004014:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	1ad2      	subs	r2, r2, r3
 8004026:	2308      	movs	r3, #8
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	429a      	cmp	r2, r3
 800402c:	d920      	bls.n	8004070 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800402e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4413      	add	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00b      	beq.n	8004058 <pvPortMalloc+0xdc>
        __asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	613b      	str	r3, [r7, #16]
    }
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	1ad2      	subs	r2, r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f000 f8fc 	bl	8004268 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004070:	4b1c      	ldr	r3, [pc, #112]	@ (80040e4 <pvPortMalloc+0x168>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	4a1a      	ldr	r2, [pc, #104]	@ (80040e4 <pvPortMalloc+0x168>)
 800407c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800407e:	4b19      	ldr	r3, [pc, #100]	@ (80040e4 <pvPortMalloc+0x168>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b1a      	ldr	r3, [pc, #104]	@ (80040ec <pvPortMalloc+0x170>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d203      	bcs.n	8004092 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800408a:	4b16      	ldr	r3, [pc, #88]	@ (80040e4 <pvPortMalloc+0x168>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a17      	ldr	r2, [pc, #92]	@ (80040ec <pvPortMalloc+0x170>)
 8004090:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80040a4:	4b12      	ldr	r3, [pc, #72]	@ (80040f0 <pvPortMalloc+0x174>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3301      	adds	r3, #1
 80040aa:	4a11      	ldr	r2, [pc, #68]	@ (80040f0 <pvPortMalloc+0x174>)
 80040ac:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80040ae:	f7fe fd59 	bl	8002b64 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00b      	beq.n	80040d4 <pvPortMalloc+0x158>
        __asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	60fb      	str	r3, [r7, #12]
    }
 80040ce:	bf00      	nop
 80040d0:	bf00      	nop
 80040d2:	e7fd      	b.n	80040d0 <pvPortMalloc+0x154>
    return pvReturn;
 80040d4:	69fb      	ldr	r3, [r7, #28]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3728      	adds	r7, #40	@ 0x28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20012e68 	.word	0x20012e68
 80040e4:	20012e6c 	.word	0x20012e6c
 80040e8:	20012e60 	.word	0x20012e60
 80040ec:	20012e70 	.word	0x20012e70
 80040f0:	20012e74 	.word	0x20012e74

080040f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d04b      	beq.n	800419e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004106:	2308      	movs	r3, #8
 8004108:	425b      	negs	r3, r3
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4413      	add	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	db0b      	blt.n	8004134 <vPortFree+0x40>
        __asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	60fb      	str	r3, [r7, #12]
    }
 800412e:	bf00      	nop
 8004130:	bf00      	nop
 8004132:	e7fd      	b.n	8004130 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00b      	beq.n	8004154 <vPortFree+0x60>
        __asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60bb      	str	r3, [r7, #8]
    }
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	0fdb      	lsrs	r3, r3, #31
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01c      	beq.n	800419e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d118      	bne.n	800419e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004178:	f7fe fce6 	bl	8002b48 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <vPortFree+0xb4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4413      	add	r3, r2
 8004186:	4a08      	ldr	r2, [pc, #32]	@ (80041a8 <vPortFree+0xb4>)
 8004188:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800418a:	6938      	ldr	r0, [r7, #16]
 800418c:	f000 f86c 	bl	8004268 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004190:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <vPortFree+0xb8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	4a05      	ldr	r2, [pc, #20]	@ (80041ac <vPortFree+0xb8>)
 8004198:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800419a:	f7fe fce3 	bl	8002b64 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20012e6c 	.word	0x20012e6c
 80041ac:	20012e78 	.word	0x20012e78

080041b0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041b6:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80041ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80041bc:	4b25      	ldr	r3, [pc, #148]	@ (8004254 <prvHeapInit+0xa4>)
 80041be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00c      	beq.n	80041e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3307      	adds	r3, #7
 80041ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0307 	bic.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	4a1d      	ldr	r2, [pc, #116]	@ (8004254 <prvHeapInit+0xa4>)
 80041e0:	4413      	add	r3, r2
 80041e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004258 <prvHeapInit+0xa8>)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80041ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004258 <prvHeapInit+0xa8>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4413      	add	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80041fc:	2208      	movs	r2, #8
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0307 	bic.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4a13      	ldr	r2, [pc, #76]	@ (800425c <prvHeapInit+0xac>)
 8004210:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004212:	4b12      	ldr	r3, [pc, #72]	@ (800425c <prvHeapInit+0xac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2200      	movs	r2, #0
 8004218:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800421a:	4b10      	ldr	r3, [pc, #64]	@ (800425c <prvHeapInit+0xac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	1ad2      	subs	r2, r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004230:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <prvHeapInit+0xac>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a08      	ldr	r2, [pc, #32]	@ (8004260 <prvHeapInit+0xb0>)
 800423e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4a07      	ldr	r2, [pc, #28]	@ (8004264 <prvHeapInit+0xb4>)
 8004246:	6013      	str	r3, [r2, #0]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	20000260 	.word	0x20000260
 8004258:	20012e60 	.word	0x20012e60
 800425c:	20012e68 	.word	0x20012e68
 8004260:	20012e70 	.word	0x20012e70
 8004264:	20012e6c 	.word	0x20012e6c

08004268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004270:	4b28      	ldr	r3, [pc, #160]	@ (8004314 <prvInsertBlockIntoFreeList+0xac>)
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e002      	b.n	800427c <prvInsertBlockIntoFreeList+0x14>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	d8f7      	bhi.n	8004276 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	4413      	add	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d108      	bne.n	80042aa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	441a      	add	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	441a      	add	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d118      	bne.n	80042f0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b15      	ldr	r3, [pc, #84]	@ (8004318 <prvInsertBlockIntoFreeList+0xb0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d00d      	beq.n	80042e6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	441a      	add	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e008      	b.n	80042f8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <prvInsertBlockIntoFreeList+0xb0>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e003      	b.n	80042f8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d002      	beq.n	8004306 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20012e60 	.word	0x20012e60
 8004318:	20012e68 	.word	0x20012e68

0800431c <std>:
 800431c:	2300      	movs	r3, #0
 800431e:	b510      	push	{r4, lr}
 8004320:	4604      	mov	r4, r0
 8004322:	e9c0 3300 	strd	r3, r3, [r0]
 8004326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800432a:	6083      	str	r3, [r0, #8]
 800432c:	8181      	strh	r1, [r0, #12]
 800432e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004330:	81c2      	strh	r2, [r0, #14]
 8004332:	6183      	str	r3, [r0, #24]
 8004334:	4619      	mov	r1, r3
 8004336:	2208      	movs	r2, #8
 8004338:	305c      	adds	r0, #92	@ 0x5c
 800433a:	f000 f9e7 	bl	800470c <memset>
 800433e:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <std+0x58>)
 8004340:	6263      	str	r3, [r4, #36]	@ 0x24
 8004342:	4b0d      	ldr	r3, [pc, #52]	@ (8004378 <std+0x5c>)
 8004344:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004346:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <std+0x60>)
 8004348:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <std+0x64>)
 800434c:	6323      	str	r3, [r4, #48]	@ 0x30
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <std+0x68>)
 8004350:	6224      	str	r4, [r4, #32]
 8004352:	429c      	cmp	r4, r3
 8004354:	d006      	beq.n	8004364 <std+0x48>
 8004356:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800435a:	4294      	cmp	r4, r2
 800435c:	d002      	beq.n	8004364 <std+0x48>
 800435e:	33d0      	adds	r3, #208	@ 0xd0
 8004360:	429c      	cmp	r4, r3
 8004362:	d105      	bne.n	8004370 <std+0x54>
 8004364:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436c:	f000 ba40 	b.w	80047f0 <__retarget_lock_init_recursive>
 8004370:	bd10      	pop	{r4, pc}
 8004372:	bf00      	nop
 8004374:	0800455d 	.word	0x0800455d
 8004378:	0800457f 	.word	0x0800457f
 800437c:	080045b7 	.word	0x080045b7
 8004380:	080045db 	.word	0x080045db
 8004384:	20012e7c 	.word	0x20012e7c

08004388 <stdio_exit_handler>:
 8004388:	4a02      	ldr	r2, [pc, #8]	@ (8004394 <stdio_exit_handler+0xc>)
 800438a:	4903      	ldr	r1, [pc, #12]	@ (8004398 <stdio_exit_handler+0x10>)
 800438c:	4803      	ldr	r0, [pc, #12]	@ (800439c <stdio_exit_handler+0x14>)
 800438e:	f000 b869 	b.w	8004464 <_fwalk_sglue>
 8004392:	bf00      	nop
 8004394:	20000014 	.word	0x20000014
 8004398:	08004b0d 	.word	0x08004b0d
 800439c:	20000024 	.word	0x20000024

080043a0 <cleanup_stdio>:
 80043a0:	6841      	ldr	r1, [r0, #4]
 80043a2:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <cleanup_stdio+0x34>)
 80043a4:	4299      	cmp	r1, r3
 80043a6:	b510      	push	{r4, lr}
 80043a8:	4604      	mov	r4, r0
 80043aa:	d001      	beq.n	80043b0 <cleanup_stdio+0x10>
 80043ac:	f000 fbae 	bl	8004b0c <_fflush_r>
 80043b0:	68a1      	ldr	r1, [r4, #8]
 80043b2:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <cleanup_stdio+0x38>)
 80043b4:	4299      	cmp	r1, r3
 80043b6:	d002      	beq.n	80043be <cleanup_stdio+0x1e>
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 fba7 	bl	8004b0c <_fflush_r>
 80043be:	68e1      	ldr	r1, [r4, #12]
 80043c0:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <cleanup_stdio+0x3c>)
 80043c2:	4299      	cmp	r1, r3
 80043c4:	d004      	beq.n	80043d0 <cleanup_stdio+0x30>
 80043c6:	4620      	mov	r0, r4
 80043c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043cc:	f000 bb9e 	b.w	8004b0c <_fflush_r>
 80043d0:	bd10      	pop	{r4, pc}
 80043d2:	bf00      	nop
 80043d4:	20012e7c 	.word	0x20012e7c
 80043d8:	20012ee4 	.word	0x20012ee4
 80043dc:	20012f4c 	.word	0x20012f4c

080043e0 <global_stdio_init.part.0>:
 80043e0:	b510      	push	{r4, lr}
 80043e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004410 <global_stdio_init.part.0+0x30>)
 80043e4:	4c0b      	ldr	r4, [pc, #44]	@ (8004414 <global_stdio_init.part.0+0x34>)
 80043e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004418 <global_stdio_init.part.0+0x38>)
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	4620      	mov	r0, r4
 80043ec:	2200      	movs	r2, #0
 80043ee:	2104      	movs	r1, #4
 80043f0:	f7ff ff94 	bl	800431c <std>
 80043f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043f8:	2201      	movs	r2, #1
 80043fa:	2109      	movs	r1, #9
 80043fc:	f7ff ff8e 	bl	800431c <std>
 8004400:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004404:	2202      	movs	r2, #2
 8004406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800440a:	2112      	movs	r1, #18
 800440c:	f7ff bf86 	b.w	800431c <std>
 8004410:	20012fb4 	.word	0x20012fb4
 8004414:	20012e7c 	.word	0x20012e7c
 8004418:	08004389 	.word	0x08004389

0800441c <__sfp_lock_acquire>:
 800441c:	4801      	ldr	r0, [pc, #4]	@ (8004424 <__sfp_lock_acquire+0x8>)
 800441e:	f000 b9e8 	b.w	80047f2 <__retarget_lock_acquire_recursive>
 8004422:	bf00      	nop
 8004424:	20012fbd 	.word	0x20012fbd

08004428 <__sfp_lock_release>:
 8004428:	4801      	ldr	r0, [pc, #4]	@ (8004430 <__sfp_lock_release+0x8>)
 800442a:	f000 b9e3 	b.w	80047f4 <__retarget_lock_release_recursive>
 800442e:	bf00      	nop
 8004430:	20012fbd 	.word	0x20012fbd

08004434 <__sinit>:
 8004434:	b510      	push	{r4, lr}
 8004436:	4604      	mov	r4, r0
 8004438:	f7ff fff0 	bl	800441c <__sfp_lock_acquire>
 800443c:	6a23      	ldr	r3, [r4, #32]
 800443e:	b11b      	cbz	r3, 8004448 <__sinit+0x14>
 8004440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004444:	f7ff bff0 	b.w	8004428 <__sfp_lock_release>
 8004448:	4b04      	ldr	r3, [pc, #16]	@ (800445c <__sinit+0x28>)
 800444a:	6223      	str	r3, [r4, #32]
 800444c:	4b04      	ldr	r3, [pc, #16]	@ (8004460 <__sinit+0x2c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f5      	bne.n	8004440 <__sinit+0xc>
 8004454:	f7ff ffc4 	bl	80043e0 <global_stdio_init.part.0>
 8004458:	e7f2      	b.n	8004440 <__sinit+0xc>
 800445a:	bf00      	nop
 800445c:	080043a1 	.word	0x080043a1
 8004460:	20012fb4 	.word	0x20012fb4

08004464 <_fwalk_sglue>:
 8004464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004468:	4607      	mov	r7, r0
 800446a:	4688      	mov	r8, r1
 800446c:	4614      	mov	r4, r2
 800446e:	2600      	movs	r6, #0
 8004470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004474:	f1b9 0901 	subs.w	r9, r9, #1
 8004478:	d505      	bpl.n	8004486 <_fwalk_sglue+0x22>
 800447a:	6824      	ldr	r4, [r4, #0]
 800447c:	2c00      	cmp	r4, #0
 800447e:	d1f7      	bne.n	8004470 <_fwalk_sglue+0xc>
 8004480:	4630      	mov	r0, r6
 8004482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004486:	89ab      	ldrh	r3, [r5, #12]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d907      	bls.n	800449c <_fwalk_sglue+0x38>
 800448c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004490:	3301      	adds	r3, #1
 8004492:	d003      	beq.n	800449c <_fwalk_sglue+0x38>
 8004494:	4629      	mov	r1, r5
 8004496:	4638      	mov	r0, r7
 8004498:	47c0      	blx	r8
 800449a:	4306      	orrs	r6, r0
 800449c:	3568      	adds	r5, #104	@ 0x68
 800449e:	e7e9      	b.n	8004474 <_fwalk_sglue+0x10>

080044a0 <_puts_r>:
 80044a0:	6a03      	ldr	r3, [r0, #32]
 80044a2:	b570      	push	{r4, r5, r6, lr}
 80044a4:	6884      	ldr	r4, [r0, #8]
 80044a6:	4605      	mov	r5, r0
 80044a8:	460e      	mov	r6, r1
 80044aa:	b90b      	cbnz	r3, 80044b0 <_puts_r+0x10>
 80044ac:	f7ff ffc2 	bl	8004434 <__sinit>
 80044b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044b2:	07db      	lsls	r3, r3, #31
 80044b4:	d405      	bmi.n	80044c2 <_puts_r+0x22>
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	0598      	lsls	r0, r3, #22
 80044ba:	d402      	bmi.n	80044c2 <_puts_r+0x22>
 80044bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044be:	f000 f998 	bl	80047f2 <__retarget_lock_acquire_recursive>
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	0719      	lsls	r1, r3, #28
 80044c6:	d502      	bpl.n	80044ce <_puts_r+0x2e>
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d135      	bne.n	800453a <_puts_r+0x9a>
 80044ce:	4621      	mov	r1, r4
 80044d0:	4628      	mov	r0, r5
 80044d2:	f000 f8c5 	bl	8004660 <__swsetup_r>
 80044d6:	b380      	cbz	r0, 800453a <_puts_r+0x9a>
 80044d8:	f04f 35ff 	mov.w	r5, #4294967295
 80044dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044de:	07da      	lsls	r2, r3, #31
 80044e0:	d405      	bmi.n	80044ee <_puts_r+0x4e>
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	059b      	lsls	r3, r3, #22
 80044e6:	d402      	bmi.n	80044ee <_puts_r+0x4e>
 80044e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044ea:	f000 f983 	bl	80047f4 <__retarget_lock_release_recursive>
 80044ee:	4628      	mov	r0, r5
 80044f0:	bd70      	pop	{r4, r5, r6, pc}
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da04      	bge.n	8004500 <_puts_r+0x60>
 80044f6:	69a2      	ldr	r2, [r4, #24]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	dc17      	bgt.n	800452c <_puts_r+0x8c>
 80044fc:	290a      	cmp	r1, #10
 80044fe:	d015      	beq.n	800452c <_puts_r+0x8c>
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	6022      	str	r2, [r4, #0]
 8004506:	7019      	strb	r1, [r3, #0]
 8004508:	68a3      	ldr	r3, [r4, #8]
 800450a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800450e:	3b01      	subs	r3, #1
 8004510:	60a3      	str	r3, [r4, #8]
 8004512:	2900      	cmp	r1, #0
 8004514:	d1ed      	bne.n	80044f2 <_puts_r+0x52>
 8004516:	2b00      	cmp	r3, #0
 8004518:	da11      	bge.n	800453e <_puts_r+0x9e>
 800451a:	4622      	mov	r2, r4
 800451c:	210a      	movs	r1, #10
 800451e:	4628      	mov	r0, r5
 8004520:	f000 f85f 	bl	80045e2 <__swbuf_r>
 8004524:	3001      	adds	r0, #1
 8004526:	d0d7      	beq.n	80044d8 <_puts_r+0x38>
 8004528:	250a      	movs	r5, #10
 800452a:	e7d7      	b.n	80044dc <_puts_r+0x3c>
 800452c:	4622      	mov	r2, r4
 800452e:	4628      	mov	r0, r5
 8004530:	f000 f857 	bl	80045e2 <__swbuf_r>
 8004534:	3001      	adds	r0, #1
 8004536:	d1e7      	bne.n	8004508 <_puts_r+0x68>
 8004538:	e7ce      	b.n	80044d8 <_puts_r+0x38>
 800453a:	3e01      	subs	r6, #1
 800453c:	e7e4      	b.n	8004508 <_puts_r+0x68>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	6022      	str	r2, [r4, #0]
 8004544:	220a      	movs	r2, #10
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e7ee      	b.n	8004528 <_puts_r+0x88>
	...

0800454c <puts>:
 800454c:	4b02      	ldr	r3, [pc, #8]	@ (8004558 <puts+0xc>)
 800454e:	4601      	mov	r1, r0
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	f7ff bfa5 	b.w	80044a0 <_puts_r>
 8004556:	bf00      	nop
 8004558:	20000020 	.word	0x20000020

0800455c <__sread>:
 800455c:	b510      	push	{r4, lr}
 800455e:	460c      	mov	r4, r1
 8004560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004564:	f000 f8fc 	bl	8004760 <_read_r>
 8004568:	2800      	cmp	r0, #0
 800456a:	bfab      	itete	ge
 800456c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800456e:	89a3      	ldrhlt	r3, [r4, #12]
 8004570:	181b      	addge	r3, r3, r0
 8004572:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004576:	bfac      	ite	ge
 8004578:	6563      	strge	r3, [r4, #84]	@ 0x54
 800457a:	81a3      	strhlt	r3, [r4, #12]
 800457c:	bd10      	pop	{r4, pc}

0800457e <__swrite>:
 800457e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004582:	461f      	mov	r7, r3
 8004584:	898b      	ldrh	r3, [r1, #12]
 8004586:	05db      	lsls	r3, r3, #23
 8004588:	4605      	mov	r5, r0
 800458a:	460c      	mov	r4, r1
 800458c:	4616      	mov	r6, r2
 800458e:	d505      	bpl.n	800459c <__swrite+0x1e>
 8004590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004594:	2302      	movs	r3, #2
 8004596:	2200      	movs	r2, #0
 8004598:	f000 f8d0 	bl	800473c <_lseek_r>
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045a6:	81a3      	strh	r3, [r4, #12]
 80045a8:	4632      	mov	r2, r6
 80045aa:	463b      	mov	r3, r7
 80045ac:	4628      	mov	r0, r5
 80045ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b2:	f000 b8e7 	b.w	8004784 <_write_r>

080045b6 <__sseek>:
 80045b6:	b510      	push	{r4, lr}
 80045b8:	460c      	mov	r4, r1
 80045ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045be:	f000 f8bd 	bl	800473c <_lseek_r>
 80045c2:	1c43      	adds	r3, r0, #1
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	bf15      	itete	ne
 80045c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045d2:	81a3      	strheq	r3, [r4, #12]
 80045d4:	bf18      	it	ne
 80045d6:	81a3      	strhne	r3, [r4, #12]
 80045d8:	bd10      	pop	{r4, pc}

080045da <__sclose>:
 80045da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045de:	f000 b89d 	b.w	800471c <_close_r>

080045e2 <__swbuf_r>:
 80045e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e4:	460e      	mov	r6, r1
 80045e6:	4614      	mov	r4, r2
 80045e8:	4605      	mov	r5, r0
 80045ea:	b118      	cbz	r0, 80045f4 <__swbuf_r+0x12>
 80045ec:	6a03      	ldr	r3, [r0, #32]
 80045ee:	b90b      	cbnz	r3, 80045f4 <__swbuf_r+0x12>
 80045f0:	f7ff ff20 	bl	8004434 <__sinit>
 80045f4:	69a3      	ldr	r3, [r4, #24]
 80045f6:	60a3      	str	r3, [r4, #8]
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	071a      	lsls	r2, r3, #28
 80045fc:	d501      	bpl.n	8004602 <__swbuf_r+0x20>
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	b943      	cbnz	r3, 8004614 <__swbuf_r+0x32>
 8004602:	4621      	mov	r1, r4
 8004604:	4628      	mov	r0, r5
 8004606:	f000 f82b 	bl	8004660 <__swsetup_r>
 800460a:	b118      	cbz	r0, 8004614 <__swbuf_r+0x32>
 800460c:	f04f 37ff 	mov.w	r7, #4294967295
 8004610:	4638      	mov	r0, r7
 8004612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	6922      	ldr	r2, [r4, #16]
 8004618:	1a98      	subs	r0, r3, r2
 800461a:	6963      	ldr	r3, [r4, #20]
 800461c:	b2f6      	uxtb	r6, r6
 800461e:	4283      	cmp	r3, r0
 8004620:	4637      	mov	r7, r6
 8004622:	dc05      	bgt.n	8004630 <__swbuf_r+0x4e>
 8004624:	4621      	mov	r1, r4
 8004626:	4628      	mov	r0, r5
 8004628:	f000 fa70 	bl	8004b0c <_fflush_r>
 800462c:	2800      	cmp	r0, #0
 800462e:	d1ed      	bne.n	800460c <__swbuf_r+0x2a>
 8004630:	68a3      	ldr	r3, [r4, #8]
 8004632:	3b01      	subs	r3, #1
 8004634:	60a3      	str	r3, [r4, #8]
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	6022      	str	r2, [r4, #0]
 800463c:	701e      	strb	r6, [r3, #0]
 800463e:	6962      	ldr	r2, [r4, #20]
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	429a      	cmp	r2, r3
 8004644:	d004      	beq.n	8004650 <__swbuf_r+0x6e>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	07db      	lsls	r3, r3, #31
 800464a:	d5e1      	bpl.n	8004610 <__swbuf_r+0x2e>
 800464c:	2e0a      	cmp	r6, #10
 800464e:	d1df      	bne.n	8004610 <__swbuf_r+0x2e>
 8004650:	4621      	mov	r1, r4
 8004652:	4628      	mov	r0, r5
 8004654:	f000 fa5a 	bl	8004b0c <_fflush_r>
 8004658:	2800      	cmp	r0, #0
 800465a:	d0d9      	beq.n	8004610 <__swbuf_r+0x2e>
 800465c:	e7d6      	b.n	800460c <__swbuf_r+0x2a>
	...

08004660 <__swsetup_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4b29      	ldr	r3, [pc, #164]	@ (8004708 <__swsetup_r+0xa8>)
 8004664:	4605      	mov	r5, r0
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	460c      	mov	r4, r1
 800466a:	b118      	cbz	r0, 8004674 <__swsetup_r+0x14>
 800466c:	6a03      	ldr	r3, [r0, #32]
 800466e:	b90b      	cbnz	r3, 8004674 <__swsetup_r+0x14>
 8004670:	f7ff fee0 	bl	8004434 <__sinit>
 8004674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004678:	0719      	lsls	r1, r3, #28
 800467a:	d422      	bmi.n	80046c2 <__swsetup_r+0x62>
 800467c:	06da      	lsls	r2, r3, #27
 800467e:	d407      	bmi.n	8004690 <__swsetup_r+0x30>
 8004680:	2209      	movs	r2, #9
 8004682:	602a      	str	r2, [r5, #0]
 8004684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	f04f 30ff 	mov.w	r0, #4294967295
 800468e:	e033      	b.n	80046f8 <__swsetup_r+0x98>
 8004690:	0758      	lsls	r0, r3, #29
 8004692:	d512      	bpl.n	80046ba <__swsetup_r+0x5a>
 8004694:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004696:	b141      	cbz	r1, 80046aa <__swsetup_r+0x4a>
 8004698:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800469c:	4299      	cmp	r1, r3
 800469e:	d002      	beq.n	80046a6 <__swsetup_r+0x46>
 80046a0:	4628      	mov	r0, r5
 80046a2:	f000 f8b7 	bl	8004814 <_free_r>
 80046a6:	2300      	movs	r3, #0
 80046a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046b0:	81a3      	strh	r3, [r4, #12]
 80046b2:	2300      	movs	r3, #0
 80046b4:	6063      	str	r3, [r4, #4]
 80046b6:	6923      	ldr	r3, [r4, #16]
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	f043 0308 	orr.w	r3, r3, #8
 80046c0:	81a3      	strh	r3, [r4, #12]
 80046c2:	6923      	ldr	r3, [r4, #16]
 80046c4:	b94b      	cbnz	r3, 80046da <__swsetup_r+0x7a>
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d0:	d003      	beq.n	80046da <__swsetup_r+0x7a>
 80046d2:	4621      	mov	r1, r4
 80046d4:	4628      	mov	r0, r5
 80046d6:	f000 fa67 	bl	8004ba8 <__smakebuf_r>
 80046da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046de:	f013 0201 	ands.w	r2, r3, #1
 80046e2:	d00a      	beq.n	80046fa <__swsetup_r+0x9a>
 80046e4:	2200      	movs	r2, #0
 80046e6:	60a2      	str	r2, [r4, #8]
 80046e8:	6962      	ldr	r2, [r4, #20]
 80046ea:	4252      	negs	r2, r2
 80046ec:	61a2      	str	r2, [r4, #24]
 80046ee:	6922      	ldr	r2, [r4, #16]
 80046f0:	b942      	cbnz	r2, 8004704 <__swsetup_r+0xa4>
 80046f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80046f6:	d1c5      	bne.n	8004684 <__swsetup_r+0x24>
 80046f8:	bd38      	pop	{r3, r4, r5, pc}
 80046fa:	0799      	lsls	r1, r3, #30
 80046fc:	bf58      	it	pl
 80046fe:	6962      	ldrpl	r2, [r4, #20]
 8004700:	60a2      	str	r2, [r4, #8]
 8004702:	e7f4      	b.n	80046ee <__swsetup_r+0x8e>
 8004704:	2000      	movs	r0, #0
 8004706:	e7f7      	b.n	80046f8 <__swsetup_r+0x98>
 8004708:	20000020 	.word	0x20000020

0800470c <memset>:
 800470c:	4402      	add	r2, r0
 800470e:	4603      	mov	r3, r0
 8004710:	4293      	cmp	r3, r2
 8004712:	d100      	bne.n	8004716 <memset+0xa>
 8004714:	4770      	bx	lr
 8004716:	f803 1b01 	strb.w	r1, [r3], #1
 800471a:	e7f9      	b.n	8004710 <memset+0x4>

0800471c <_close_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4d06      	ldr	r5, [pc, #24]	@ (8004738 <_close_r+0x1c>)
 8004720:	2300      	movs	r3, #0
 8004722:	4604      	mov	r4, r0
 8004724:	4608      	mov	r0, r1
 8004726:	602b      	str	r3, [r5, #0]
 8004728:	f7fc fa4b 	bl	8000bc2 <_close>
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d102      	bne.n	8004736 <_close_r+0x1a>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	b103      	cbz	r3, 8004736 <_close_r+0x1a>
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	bd38      	pop	{r3, r4, r5, pc}
 8004738:	20012fb8 	.word	0x20012fb8

0800473c <_lseek_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4d07      	ldr	r5, [pc, #28]	@ (800475c <_lseek_r+0x20>)
 8004740:	4604      	mov	r4, r0
 8004742:	4608      	mov	r0, r1
 8004744:	4611      	mov	r1, r2
 8004746:	2200      	movs	r2, #0
 8004748:	602a      	str	r2, [r5, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	f7fc fa60 	bl	8000c10 <_lseek>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d102      	bne.n	800475a <_lseek_r+0x1e>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	b103      	cbz	r3, 800475a <_lseek_r+0x1e>
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	20012fb8 	.word	0x20012fb8

08004760 <_read_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4d07      	ldr	r5, [pc, #28]	@ (8004780 <_read_r+0x20>)
 8004764:	4604      	mov	r4, r0
 8004766:	4608      	mov	r0, r1
 8004768:	4611      	mov	r1, r2
 800476a:	2200      	movs	r2, #0
 800476c:	602a      	str	r2, [r5, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	f7fc f9ee 	bl	8000b50 <_read>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_read_r+0x1e>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_read_r+0x1e>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	20012fb8 	.word	0x20012fb8

08004784 <_write_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4d07      	ldr	r5, [pc, #28]	@ (80047a4 <_write_r+0x20>)
 8004788:	4604      	mov	r4, r0
 800478a:	4608      	mov	r0, r1
 800478c:	4611      	mov	r1, r2
 800478e:	2200      	movs	r2, #0
 8004790:	602a      	str	r2, [r5, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	f7fc f9f9 	bl	8000b8a <_write>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_write_r+0x1e>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_write_r+0x1e>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	20012fb8 	.word	0x20012fb8

080047a8 <__libc_init_array>:
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	4d0d      	ldr	r5, [pc, #52]	@ (80047e0 <__libc_init_array+0x38>)
 80047ac:	4c0d      	ldr	r4, [pc, #52]	@ (80047e4 <__libc_init_array+0x3c>)
 80047ae:	1b64      	subs	r4, r4, r5
 80047b0:	10a4      	asrs	r4, r4, #2
 80047b2:	2600      	movs	r6, #0
 80047b4:	42a6      	cmp	r6, r4
 80047b6:	d109      	bne.n	80047cc <__libc_init_array+0x24>
 80047b8:	4d0b      	ldr	r5, [pc, #44]	@ (80047e8 <__libc_init_array+0x40>)
 80047ba:	4c0c      	ldr	r4, [pc, #48]	@ (80047ec <__libc_init_array+0x44>)
 80047bc:	f000 fa70 	bl	8004ca0 <_init>
 80047c0:	1b64      	subs	r4, r4, r5
 80047c2:	10a4      	asrs	r4, r4, #2
 80047c4:	2600      	movs	r6, #0
 80047c6:	42a6      	cmp	r6, r4
 80047c8:	d105      	bne.n	80047d6 <__libc_init_array+0x2e>
 80047ca:	bd70      	pop	{r4, r5, r6, pc}
 80047cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d0:	4798      	blx	r3
 80047d2:	3601      	adds	r6, #1
 80047d4:	e7ee      	b.n	80047b4 <__libc_init_array+0xc>
 80047d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047da:	4798      	blx	r3
 80047dc:	3601      	adds	r6, #1
 80047de:	e7f2      	b.n	80047c6 <__libc_init_array+0x1e>
 80047e0:	08004d30 	.word	0x08004d30
 80047e4:	08004d30 	.word	0x08004d30
 80047e8:	08004d30 	.word	0x08004d30
 80047ec:	08004d34 	.word	0x08004d34

080047f0 <__retarget_lock_init_recursive>:
 80047f0:	4770      	bx	lr

080047f2 <__retarget_lock_acquire_recursive>:
 80047f2:	4770      	bx	lr

080047f4 <__retarget_lock_release_recursive>:
 80047f4:	4770      	bx	lr

080047f6 <memcpy>:
 80047f6:	440a      	add	r2, r1
 80047f8:	4291      	cmp	r1, r2
 80047fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80047fe:	d100      	bne.n	8004802 <memcpy+0xc>
 8004800:	4770      	bx	lr
 8004802:	b510      	push	{r4, lr}
 8004804:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800480c:	4291      	cmp	r1, r2
 800480e:	d1f9      	bne.n	8004804 <memcpy+0xe>
 8004810:	bd10      	pop	{r4, pc}
	...

08004814 <_free_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4605      	mov	r5, r0
 8004818:	2900      	cmp	r1, #0
 800481a:	d041      	beq.n	80048a0 <_free_r+0x8c>
 800481c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004820:	1f0c      	subs	r4, r1, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	bfb8      	it	lt
 8004826:	18e4      	addlt	r4, r4, r3
 8004828:	f000 f8e0 	bl	80049ec <__malloc_lock>
 800482c:	4a1d      	ldr	r2, [pc, #116]	@ (80048a4 <_free_r+0x90>)
 800482e:	6813      	ldr	r3, [r2, #0]
 8004830:	b933      	cbnz	r3, 8004840 <_free_r+0x2c>
 8004832:	6063      	str	r3, [r4, #4]
 8004834:	6014      	str	r4, [r2, #0]
 8004836:	4628      	mov	r0, r5
 8004838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800483c:	f000 b8dc 	b.w	80049f8 <__malloc_unlock>
 8004840:	42a3      	cmp	r3, r4
 8004842:	d908      	bls.n	8004856 <_free_r+0x42>
 8004844:	6820      	ldr	r0, [r4, #0]
 8004846:	1821      	adds	r1, r4, r0
 8004848:	428b      	cmp	r3, r1
 800484a:	bf01      	itttt	eq
 800484c:	6819      	ldreq	r1, [r3, #0]
 800484e:	685b      	ldreq	r3, [r3, #4]
 8004850:	1809      	addeq	r1, r1, r0
 8004852:	6021      	streq	r1, [r4, #0]
 8004854:	e7ed      	b.n	8004832 <_free_r+0x1e>
 8004856:	461a      	mov	r2, r3
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	b10b      	cbz	r3, 8004860 <_free_r+0x4c>
 800485c:	42a3      	cmp	r3, r4
 800485e:	d9fa      	bls.n	8004856 <_free_r+0x42>
 8004860:	6811      	ldr	r1, [r2, #0]
 8004862:	1850      	adds	r0, r2, r1
 8004864:	42a0      	cmp	r0, r4
 8004866:	d10b      	bne.n	8004880 <_free_r+0x6c>
 8004868:	6820      	ldr	r0, [r4, #0]
 800486a:	4401      	add	r1, r0
 800486c:	1850      	adds	r0, r2, r1
 800486e:	4283      	cmp	r3, r0
 8004870:	6011      	str	r1, [r2, #0]
 8004872:	d1e0      	bne.n	8004836 <_free_r+0x22>
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	6053      	str	r3, [r2, #4]
 800487a:	4408      	add	r0, r1
 800487c:	6010      	str	r0, [r2, #0]
 800487e:	e7da      	b.n	8004836 <_free_r+0x22>
 8004880:	d902      	bls.n	8004888 <_free_r+0x74>
 8004882:	230c      	movs	r3, #12
 8004884:	602b      	str	r3, [r5, #0]
 8004886:	e7d6      	b.n	8004836 <_free_r+0x22>
 8004888:	6820      	ldr	r0, [r4, #0]
 800488a:	1821      	adds	r1, r4, r0
 800488c:	428b      	cmp	r3, r1
 800488e:	bf04      	itt	eq
 8004890:	6819      	ldreq	r1, [r3, #0]
 8004892:	685b      	ldreq	r3, [r3, #4]
 8004894:	6063      	str	r3, [r4, #4]
 8004896:	bf04      	itt	eq
 8004898:	1809      	addeq	r1, r1, r0
 800489a:	6021      	streq	r1, [r4, #0]
 800489c:	6054      	str	r4, [r2, #4]
 800489e:	e7ca      	b.n	8004836 <_free_r+0x22>
 80048a0:	bd38      	pop	{r3, r4, r5, pc}
 80048a2:	bf00      	nop
 80048a4:	20012fc4 	.word	0x20012fc4

080048a8 <sbrk_aligned>:
 80048a8:	b570      	push	{r4, r5, r6, lr}
 80048aa:	4e0f      	ldr	r6, [pc, #60]	@ (80048e8 <sbrk_aligned+0x40>)
 80048ac:	460c      	mov	r4, r1
 80048ae:	6831      	ldr	r1, [r6, #0]
 80048b0:	4605      	mov	r5, r0
 80048b2:	b911      	cbnz	r1, 80048ba <sbrk_aligned+0x12>
 80048b4:	f000 f9d6 	bl	8004c64 <_sbrk_r>
 80048b8:	6030      	str	r0, [r6, #0]
 80048ba:	4621      	mov	r1, r4
 80048bc:	4628      	mov	r0, r5
 80048be:	f000 f9d1 	bl	8004c64 <_sbrk_r>
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	d103      	bne.n	80048ce <sbrk_aligned+0x26>
 80048c6:	f04f 34ff 	mov.w	r4, #4294967295
 80048ca:	4620      	mov	r0, r4
 80048cc:	bd70      	pop	{r4, r5, r6, pc}
 80048ce:	1cc4      	adds	r4, r0, #3
 80048d0:	f024 0403 	bic.w	r4, r4, #3
 80048d4:	42a0      	cmp	r0, r4
 80048d6:	d0f8      	beq.n	80048ca <sbrk_aligned+0x22>
 80048d8:	1a21      	subs	r1, r4, r0
 80048da:	4628      	mov	r0, r5
 80048dc:	f000 f9c2 	bl	8004c64 <_sbrk_r>
 80048e0:	3001      	adds	r0, #1
 80048e2:	d1f2      	bne.n	80048ca <sbrk_aligned+0x22>
 80048e4:	e7ef      	b.n	80048c6 <sbrk_aligned+0x1e>
 80048e6:	bf00      	nop
 80048e8:	20012fc0 	.word	0x20012fc0

080048ec <_malloc_r>:
 80048ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f0:	1ccd      	adds	r5, r1, #3
 80048f2:	f025 0503 	bic.w	r5, r5, #3
 80048f6:	3508      	adds	r5, #8
 80048f8:	2d0c      	cmp	r5, #12
 80048fa:	bf38      	it	cc
 80048fc:	250c      	movcc	r5, #12
 80048fe:	2d00      	cmp	r5, #0
 8004900:	4606      	mov	r6, r0
 8004902:	db01      	blt.n	8004908 <_malloc_r+0x1c>
 8004904:	42a9      	cmp	r1, r5
 8004906:	d904      	bls.n	8004912 <_malloc_r+0x26>
 8004908:	230c      	movs	r3, #12
 800490a:	6033      	str	r3, [r6, #0]
 800490c:	2000      	movs	r0, #0
 800490e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049e8 <_malloc_r+0xfc>
 8004916:	f000 f869 	bl	80049ec <__malloc_lock>
 800491a:	f8d8 3000 	ldr.w	r3, [r8]
 800491e:	461c      	mov	r4, r3
 8004920:	bb44      	cbnz	r4, 8004974 <_malloc_r+0x88>
 8004922:	4629      	mov	r1, r5
 8004924:	4630      	mov	r0, r6
 8004926:	f7ff ffbf 	bl	80048a8 <sbrk_aligned>
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	4604      	mov	r4, r0
 800492e:	d158      	bne.n	80049e2 <_malloc_r+0xf6>
 8004930:	f8d8 4000 	ldr.w	r4, [r8]
 8004934:	4627      	mov	r7, r4
 8004936:	2f00      	cmp	r7, #0
 8004938:	d143      	bne.n	80049c2 <_malloc_r+0xd6>
 800493a:	2c00      	cmp	r4, #0
 800493c:	d04b      	beq.n	80049d6 <_malloc_r+0xea>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	4639      	mov	r1, r7
 8004942:	4630      	mov	r0, r6
 8004944:	eb04 0903 	add.w	r9, r4, r3
 8004948:	f000 f98c 	bl	8004c64 <_sbrk_r>
 800494c:	4581      	cmp	r9, r0
 800494e:	d142      	bne.n	80049d6 <_malloc_r+0xea>
 8004950:	6821      	ldr	r1, [r4, #0]
 8004952:	1a6d      	subs	r5, r5, r1
 8004954:	4629      	mov	r1, r5
 8004956:	4630      	mov	r0, r6
 8004958:	f7ff ffa6 	bl	80048a8 <sbrk_aligned>
 800495c:	3001      	adds	r0, #1
 800495e:	d03a      	beq.n	80049d6 <_malloc_r+0xea>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	442b      	add	r3, r5
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	f8d8 3000 	ldr.w	r3, [r8]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	bb62      	cbnz	r2, 80049c8 <_malloc_r+0xdc>
 800496e:	f8c8 7000 	str.w	r7, [r8]
 8004972:	e00f      	b.n	8004994 <_malloc_r+0xa8>
 8004974:	6822      	ldr	r2, [r4, #0]
 8004976:	1b52      	subs	r2, r2, r5
 8004978:	d420      	bmi.n	80049bc <_malloc_r+0xd0>
 800497a:	2a0b      	cmp	r2, #11
 800497c:	d917      	bls.n	80049ae <_malloc_r+0xc2>
 800497e:	1961      	adds	r1, r4, r5
 8004980:	42a3      	cmp	r3, r4
 8004982:	6025      	str	r5, [r4, #0]
 8004984:	bf18      	it	ne
 8004986:	6059      	strne	r1, [r3, #4]
 8004988:	6863      	ldr	r3, [r4, #4]
 800498a:	bf08      	it	eq
 800498c:	f8c8 1000 	streq.w	r1, [r8]
 8004990:	5162      	str	r2, [r4, r5]
 8004992:	604b      	str	r3, [r1, #4]
 8004994:	4630      	mov	r0, r6
 8004996:	f000 f82f 	bl	80049f8 <__malloc_unlock>
 800499a:	f104 000b 	add.w	r0, r4, #11
 800499e:	1d23      	adds	r3, r4, #4
 80049a0:	f020 0007 	bic.w	r0, r0, #7
 80049a4:	1ac2      	subs	r2, r0, r3
 80049a6:	bf1c      	itt	ne
 80049a8:	1a1b      	subne	r3, r3, r0
 80049aa:	50a3      	strne	r3, [r4, r2]
 80049ac:	e7af      	b.n	800490e <_malloc_r+0x22>
 80049ae:	6862      	ldr	r2, [r4, #4]
 80049b0:	42a3      	cmp	r3, r4
 80049b2:	bf0c      	ite	eq
 80049b4:	f8c8 2000 	streq.w	r2, [r8]
 80049b8:	605a      	strne	r2, [r3, #4]
 80049ba:	e7eb      	b.n	8004994 <_malloc_r+0xa8>
 80049bc:	4623      	mov	r3, r4
 80049be:	6864      	ldr	r4, [r4, #4]
 80049c0:	e7ae      	b.n	8004920 <_malloc_r+0x34>
 80049c2:	463c      	mov	r4, r7
 80049c4:	687f      	ldr	r7, [r7, #4]
 80049c6:	e7b6      	b.n	8004936 <_malloc_r+0x4a>
 80049c8:	461a      	mov	r2, r3
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	42a3      	cmp	r3, r4
 80049ce:	d1fb      	bne.n	80049c8 <_malloc_r+0xdc>
 80049d0:	2300      	movs	r3, #0
 80049d2:	6053      	str	r3, [r2, #4]
 80049d4:	e7de      	b.n	8004994 <_malloc_r+0xa8>
 80049d6:	230c      	movs	r3, #12
 80049d8:	6033      	str	r3, [r6, #0]
 80049da:	4630      	mov	r0, r6
 80049dc:	f000 f80c 	bl	80049f8 <__malloc_unlock>
 80049e0:	e794      	b.n	800490c <_malloc_r+0x20>
 80049e2:	6005      	str	r5, [r0, #0]
 80049e4:	e7d6      	b.n	8004994 <_malloc_r+0xa8>
 80049e6:	bf00      	nop
 80049e8:	20012fc4 	.word	0x20012fc4

080049ec <__malloc_lock>:
 80049ec:	4801      	ldr	r0, [pc, #4]	@ (80049f4 <__malloc_lock+0x8>)
 80049ee:	f7ff bf00 	b.w	80047f2 <__retarget_lock_acquire_recursive>
 80049f2:	bf00      	nop
 80049f4:	20012fbc 	.word	0x20012fbc

080049f8 <__malloc_unlock>:
 80049f8:	4801      	ldr	r0, [pc, #4]	@ (8004a00 <__malloc_unlock+0x8>)
 80049fa:	f7ff befb 	b.w	80047f4 <__retarget_lock_release_recursive>
 80049fe:	bf00      	nop
 8004a00:	20012fbc 	.word	0x20012fbc

08004a04 <__sflush_r>:
 8004a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0c:	0716      	lsls	r6, r2, #28
 8004a0e:	4605      	mov	r5, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	d454      	bmi.n	8004abe <__sflush_r+0xba>
 8004a14:	684b      	ldr	r3, [r1, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	dc02      	bgt.n	8004a20 <__sflush_r+0x1c>
 8004a1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	dd48      	ble.n	8004ab2 <__sflush_r+0xae>
 8004a20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a22:	2e00      	cmp	r6, #0
 8004a24:	d045      	beq.n	8004ab2 <__sflush_r+0xae>
 8004a26:	2300      	movs	r3, #0
 8004a28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a2c:	682f      	ldr	r7, [r5, #0]
 8004a2e:	6a21      	ldr	r1, [r4, #32]
 8004a30:	602b      	str	r3, [r5, #0]
 8004a32:	d030      	beq.n	8004a96 <__sflush_r+0x92>
 8004a34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	0759      	lsls	r1, r3, #29
 8004a3a:	d505      	bpl.n	8004a48 <__sflush_r+0x44>
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	1ad2      	subs	r2, r2, r3
 8004a40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a42:	b10b      	cbz	r3, 8004a48 <__sflush_r+0x44>
 8004a44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a46:	1ad2      	subs	r2, r2, r3
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a4c:	6a21      	ldr	r1, [r4, #32]
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b0      	blx	r6
 8004a52:	1c43      	adds	r3, r0, #1
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	d106      	bne.n	8004a66 <__sflush_r+0x62>
 8004a58:	6829      	ldr	r1, [r5, #0]
 8004a5a:	291d      	cmp	r1, #29
 8004a5c:	d82b      	bhi.n	8004ab6 <__sflush_r+0xb2>
 8004a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004b08 <__sflush_r+0x104>)
 8004a60:	410a      	asrs	r2, r1
 8004a62:	07d6      	lsls	r6, r2, #31
 8004a64:	d427      	bmi.n	8004ab6 <__sflush_r+0xb2>
 8004a66:	2200      	movs	r2, #0
 8004a68:	6062      	str	r2, [r4, #4]
 8004a6a:	04d9      	lsls	r1, r3, #19
 8004a6c:	6922      	ldr	r2, [r4, #16]
 8004a6e:	6022      	str	r2, [r4, #0]
 8004a70:	d504      	bpl.n	8004a7c <__sflush_r+0x78>
 8004a72:	1c42      	adds	r2, r0, #1
 8004a74:	d101      	bne.n	8004a7a <__sflush_r+0x76>
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	b903      	cbnz	r3, 8004a7c <__sflush_r+0x78>
 8004a7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a7e:	602f      	str	r7, [r5, #0]
 8004a80:	b1b9      	cbz	r1, 8004ab2 <__sflush_r+0xae>
 8004a82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a86:	4299      	cmp	r1, r3
 8004a88:	d002      	beq.n	8004a90 <__sflush_r+0x8c>
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f7ff fec2 	bl	8004814 <_free_r>
 8004a90:	2300      	movs	r3, #0
 8004a92:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a94:	e00d      	b.n	8004ab2 <__sflush_r+0xae>
 8004a96:	2301      	movs	r3, #1
 8004a98:	4628      	mov	r0, r5
 8004a9a:	47b0      	blx	r6
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	1c50      	adds	r0, r2, #1
 8004aa0:	d1c9      	bne.n	8004a36 <__sflush_r+0x32>
 8004aa2:	682b      	ldr	r3, [r5, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0c6      	beq.n	8004a36 <__sflush_r+0x32>
 8004aa8:	2b1d      	cmp	r3, #29
 8004aaa:	d001      	beq.n	8004ab0 <__sflush_r+0xac>
 8004aac:	2b16      	cmp	r3, #22
 8004aae:	d11e      	bne.n	8004aee <__sflush_r+0xea>
 8004ab0:	602f      	str	r7, [r5, #0]
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	e022      	b.n	8004afc <__sflush_r+0xf8>
 8004ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aba:	b21b      	sxth	r3, r3
 8004abc:	e01b      	b.n	8004af6 <__sflush_r+0xf2>
 8004abe:	690f      	ldr	r7, [r1, #16]
 8004ac0:	2f00      	cmp	r7, #0
 8004ac2:	d0f6      	beq.n	8004ab2 <__sflush_r+0xae>
 8004ac4:	0793      	lsls	r3, r2, #30
 8004ac6:	680e      	ldr	r6, [r1, #0]
 8004ac8:	bf08      	it	eq
 8004aca:	694b      	ldreq	r3, [r1, #20]
 8004acc:	600f      	str	r7, [r1, #0]
 8004ace:	bf18      	it	ne
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	eba6 0807 	sub.w	r8, r6, r7
 8004ad6:	608b      	str	r3, [r1, #8]
 8004ad8:	f1b8 0f00 	cmp.w	r8, #0
 8004adc:	dde9      	ble.n	8004ab2 <__sflush_r+0xae>
 8004ade:	6a21      	ldr	r1, [r4, #32]
 8004ae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ae2:	4643      	mov	r3, r8
 8004ae4:	463a      	mov	r2, r7
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	47b0      	blx	r6
 8004aea:	2800      	cmp	r0, #0
 8004aec:	dc08      	bgt.n	8004b00 <__sflush_r+0xfc>
 8004aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295
 8004afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b00:	4407      	add	r7, r0
 8004b02:	eba8 0800 	sub.w	r8, r8, r0
 8004b06:	e7e7      	b.n	8004ad8 <__sflush_r+0xd4>
 8004b08:	dfbffffe 	.word	0xdfbffffe

08004b0c <_fflush_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	690b      	ldr	r3, [r1, #16]
 8004b10:	4605      	mov	r5, r0
 8004b12:	460c      	mov	r4, r1
 8004b14:	b913      	cbnz	r3, 8004b1c <_fflush_r+0x10>
 8004b16:	2500      	movs	r5, #0
 8004b18:	4628      	mov	r0, r5
 8004b1a:	bd38      	pop	{r3, r4, r5, pc}
 8004b1c:	b118      	cbz	r0, 8004b26 <_fflush_r+0x1a>
 8004b1e:	6a03      	ldr	r3, [r0, #32]
 8004b20:	b90b      	cbnz	r3, 8004b26 <_fflush_r+0x1a>
 8004b22:	f7ff fc87 	bl	8004434 <__sinit>
 8004b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f3      	beq.n	8004b16 <_fflush_r+0xa>
 8004b2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b30:	07d0      	lsls	r0, r2, #31
 8004b32:	d404      	bmi.n	8004b3e <_fflush_r+0x32>
 8004b34:	0599      	lsls	r1, r3, #22
 8004b36:	d402      	bmi.n	8004b3e <_fflush_r+0x32>
 8004b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b3a:	f7ff fe5a 	bl	80047f2 <__retarget_lock_acquire_recursive>
 8004b3e:	4628      	mov	r0, r5
 8004b40:	4621      	mov	r1, r4
 8004b42:	f7ff ff5f 	bl	8004a04 <__sflush_r>
 8004b46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b48:	07da      	lsls	r2, r3, #31
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	d4e4      	bmi.n	8004b18 <_fflush_r+0xc>
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	059b      	lsls	r3, r3, #22
 8004b52:	d4e1      	bmi.n	8004b18 <_fflush_r+0xc>
 8004b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b56:	f7ff fe4d 	bl	80047f4 <__retarget_lock_release_recursive>
 8004b5a:	e7dd      	b.n	8004b18 <_fflush_r+0xc>

08004b5c <__swhatbuf_r>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	460c      	mov	r4, r1
 8004b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b64:	2900      	cmp	r1, #0
 8004b66:	b096      	sub	sp, #88	@ 0x58
 8004b68:	4615      	mov	r5, r2
 8004b6a:	461e      	mov	r6, r3
 8004b6c:	da0d      	bge.n	8004b8a <__swhatbuf_r+0x2e>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b74:	f04f 0100 	mov.w	r1, #0
 8004b78:	bf14      	ite	ne
 8004b7a:	2340      	movne	r3, #64	@ 0x40
 8004b7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b80:	2000      	movs	r0, #0
 8004b82:	6031      	str	r1, [r6, #0]
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	b016      	add	sp, #88	@ 0x58
 8004b88:	bd70      	pop	{r4, r5, r6, pc}
 8004b8a:	466a      	mov	r2, sp
 8004b8c:	f000 f848 	bl	8004c20 <_fstat_r>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	dbec      	blt.n	8004b6e <__swhatbuf_r+0x12>
 8004b94:	9901      	ldr	r1, [sp, #4]
 8004b96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b9e:	4259      	negs	r1, r3
 8004ba0:	4159      	adcs	r1, r3
 8004ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ba6:	e7eb      	b.n	8004b80 <__swhatbuf_r+0x24>

08004ba8 <__smakebuf_r>:
 8004ba8:	898b      	ldrh	r3, [r1, #12]
 8004baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bac:	079d      	lsls	r5, r3, #30
 8004bae:	4606      	mov	r6, r0
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	d507      	bpl.n	8004bc4 <__smakebuf_r+0x1c>
 8004bb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	6123      	str	r3, [r4, #16]
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	6163      	str	r3, [r4, #20]
 8004bc0:	b003      	add	sp, #12
 8004bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc4:	ab01      	add	r3, sp, #4
 8004bc6:	466a      	mov	r2, sp
 8004bc8:	f7ff ffc8 	bl	8004b5c <__swhatbuf_r>
 8004bcc:	9f00      	ldr	r7, [sp, #0]
 8004bce:	4605      	mov	r5, r0
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f7ff fe8a 	bl	80048ec <_malloc_r>
 8004bd8:	b948      	cbnz	r0, 8004bee <__smakebuf_r+0x46>
 8004bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bde:	059a      	lsls	r2, r3, #22
 8004be0:	d4ee      	bmi.n	8004bc0 <__smakebuf_r+0x18>
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	f043 0302 	orr.w	r3, r3, #2
 8004bea:	81a3      	strh	r3, [r4, #12]
 8004bec:	e7e2      	b.n	8004bb4 <__smakebuf_r+0xc>
 8004bee:	89a3      	ldrh	r3, [r4, #12]
 8004bf0:	6020      	str	r0, [r4, #0]
 8004bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf6:	81a3      	strh	r3, [r4, #12]
 8004bf8:	9b01      	ldr	r3, [sp, #4]
 8004bfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004bfe:	b15b      	cbz	r3, 8004c18 <__smakebuf_r+0x70>
 8004c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 f81d 	bl	8004c44 <_isatty_r>
 8004c0a:	b128      	cbz	r0, 8004c18 <__smakebuf_r+0x70>
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	81a3      	strh	r3, [r4, #12]
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	431d      	orrs	r5, r3
 8004c1c:	81a5      	strh	r5, [r4, #12]
 8004c1e:	e7cf      	b.n	8004bc0 <__smakebuf_r+0x18>

08004c20 <_fstat_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4d07      	ldr	r5, [pc, #28]	@ (8004c40 <_fstat_r+0x20>)
 8004c24:	2300      	movs	r3, #0
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	602b      	str	r3, [r5, #0]
 8004c2e:	f7fb ffd4 	bl	8000bda <_fstat>
 8004c32:	1c43      	adds	r3, r0, #1
 8004c34:	d102      	bne.n	8004c3c <_fstat_r+0x1c>
 8004c36:	682b      	ldr	r3, [r5, #0]
 8004c38:	b103      	cbz	r3, 8004c3c <_fstat_r+0x1c>
 8004c3a:	6023      	str	r3, [r4, #0]
 8004c3c:	bd38      	pop	{r3, r4, r5, pc}
 8004c3e:	bf00      	nop
 8004c40:	20012fb8 	.word	0x20012fb8

08004c44 <_isatty_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4d06      	ldr	r5, [pc, #24]	@ (8004c60 <_isatty_r+0x1c>)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	602b      	str	r3, [r5, #0]
 8004c50:	f7fb ffd3 	bl	8000bfa <_isatty>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d102      	bne.n	8004c5e <_isatty_r+0x1a>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	b103      	cbz	r3, 8004c5e <_isatty_r+0x1a>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	20012fb8 	.word	0x20012fb8

08004c64 <_sbrk_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4d06      	ldr	r5, [pc, #24]	@ (8004c80 <_sbrk_r+0x1c>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	f000 f808 	bl	8004c84 <_sbrk>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_sbrk_r+0x1a>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_sbrk_r+0x1a>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20012fb8 	.word	0x20012fb8

08004c84 <_sbrk>:
 8004c84:	4a04      	ldr	r2, [pc, #16]	@ (8004c98 <_sbrk+0x14>)
 8004c86:	6811      	ldr	r1, [r2, #0]
 8004c88:	4603      	mov	r3, r0
 8004c8a:	b909      	cbnz	r1, 8004c90 <_sbrk+0xc>
 8004c8c:	4903      	ldr	r1, [pc, #12]	@ (8004c9c <_sbrk+0x18>)
 8004c8e:	6011      	str	r1, [r2, #0]
 8004c90:	6810      	ldr	r0, [r2, #0]
 8004c92:	4403      	add	r3, r0
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4770      	bx	lr
 8004c98:	20012fc8 	.word	0x20012fc8
 8004c9c:	20012fd0 	.word	0x20012fd0

08004ca0 <_init>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr

08004cac <_fini>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr
